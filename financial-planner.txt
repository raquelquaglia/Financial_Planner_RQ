{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit 5 - Financial Planning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial imports\n",
    "import os\n",
    "import requests\n",
    "import pandas as pd\n",
    "from dotenv import load_dotenv\n",
    "import alpaca_trade_api as tradeapi\n",
    "from MCForecastTools import MCSimulation\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load .env enviroment variables\n",
    "load_dotenv()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1 - Personal Finance Planner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Crypto Prices Using the `requests` Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set current amount of crypto assets\n",
    "# YOUR CODE HERE!\n",
    "my_btc = 1.2\n",
    "my_eth = 5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crypto API URLs\n",
    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=CAD\"\n",
    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=CAD\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n",
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "resp_data_btc = requests.get(btc_url)\n",
    "resp_data_eth = requests.get(eth_url)\n",
    "print(resp_data_btc)\n",
    "print(resp_data_eth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      " \"data\": {\n",
      "  \"1\": {\n",
      "   \"id\": 1,\n",
      "   \"name\": \"Bitcoin\",\n",
      "   \"symbol\": \"BTC\",\n",
      "   \"website_slug\": \"bitcoin\",\n",
      "   \"rank\": 1,\n",
      "   \"circulating_supply\": 18609775,\n",
      "   \"total_supply\": 18609775,\n",
      "   \"max_supply\": 21000000,\n",
      "   \"quotes\": {\n",
      "    \"USD\": {\n",
      "     \"price\": 33415.0,\n",
      "     \"volume_24h\": 47753517305,\n",
      "     \"market_cap\": 621836566048,\n",
      "     \"percentage_change_1h\": 0.433727873615628,\n",
      "     \"percentage_change_24h\": 2.27979132283907,\n",
      "     \"percentage_change_7d\": -6.67448724512717,\n",
      "     \"percent_change_1h\": 0.433727873615628,\n",
      "     \"percent_change_24h\": 2.27979132283907,\n",
      "     \"percent_change_7d\": -6.67448724512717\n",
      "    },\n",
      "    \"CAD\": {\n",
      "     \"price\": 42443.733,\n",
      "     \"volume_24h\": 60656517680.811,\n",
      "     \"market_cap\": 789856806194.17,\n",
      "     \"percent_change_1h\": 0.433727873615628,\n",
      "     \"percent_change_24h\": 2.27979132283907,\n",
      "     \"percent_change_7d\": -6.67448724512717\n",
      "    }\n",
      "   },\n",
      "   \"last_updated\": 1611555407\n",
      "  }\n",
      " },\n",
      " \"metadata\": {\n",
      "  \"timestamp\": 1611555407,\n",
      "  \"num_cryptocurrencies\": 1385,\n",
      "  \"error\": null\n",
      " }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "resp_data_btc = requests.get(btc_url).json()\n",
    "print(json.dumps(resp_data_btc, indent=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bitcoin current price is $ 33415.0\n"
     ]
    }
   ],
   "source": [
    "BTC_price = resp_data_btc[\"data\"][\"1\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "print(f\"Bitcoin current price is $ {BTC_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      " \"data\": {\n",
      "  \"1027\": {\n",
      "   \"id\": 1027,\n",
      "   \"name\": \"Ethereum\",\n",
      "   \"symbol\": \"ETH\",\n",
      "   \"website_slug\": \"ethereum\",\n",
      "   \"rank\": 2,\n",
      "   \"circulating_supply\": 114393227,\n",
      "   \"total_supply\": 114393227,\n",
      "   \"max_supply\": 0,\n",
      "   \"quotes\": {\n",
      "    \"USD\": {\n",
      "     \"price\": 1431.39,\n",
      "     \"volume_24h\": 45533997521,\n",
      "     \"market_cap\": 164214611456,\n",
      "     \"percentage_change_1h\": 0.184454865201904,\n",
      "     \"percentage_change_24h\": 8.82319701895314,\n",
      "     \"percentage_change_7d\": 16.4320710318025,\n",
      "     \"percent_change_1h\": 0.184454865201904,\n",
      "     \"percent_change_24h\": 8.82319701895314,\n",
      "     \"percent_change_7d\": 16.4320710318025\n",
      "    },\n",
      "    \"CAD\": {\n",
      "     \"price\": 1818.151578,\n",
      "     \"volume_24h\": 57837283651.1742,\n",
      "     \"market_cap\": 208585399471.411,\n",
      "     \"percent_change_1h\": 0.184454865201904,\n",
      "     \"percent_change_24h\": 8.82319701895314,\n",
      "     \"percent_change_7d\": 16.4320710318025\n",
      "    }\n",
      "   },\n",
      "   \"last_updated\": 1611555597\n",
      "  }\n",
      " },\n",
      " \"metadata\": {\n",
      "  \"timestamp\": 1611555597,\n",
      "  \"num_cryptocurrencies\": 1385,\n",
      "  \"error\": null\n",
      " }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "resp_data_eth = requests.get(eth_url).json()\n",
    "print(json.dumps(resp_data_eth, indent=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ethereum current price is $ 1431.39\n"
     ]
    }
   ],
   "source": [
    "ETH_price = resp_data_eth[\"data\"][\"1027\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "print(f\"Ethereum current price is $ {ETH_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 1.2 BTC is $40098.00\n",
      "The current value of your 5.3 ETH is $7586.37\n"
     ]
    }
   ],
   "source": [
    "# Fetch current BTC price\n",
    "BTC_price = resp_data_btc[\"data\"][\"1\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "\n",
    "# Fetch current ETH price\n",
    "ETH_price = resp_data_eth[\"data\"][\"1027\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "\n",
    "# Compute current value of my crpto\n",
    "# YOUR CODE HERE!\n",
    "my_btc_value = my_btc * BTC_price\n",
    "my_eth_value = my_eth * ETH_price\n",
    "# Print current crypto wallet balance\n",
    "print(f\"The current value of your {my_btc} BTC is ${my_btc_value:0.2f}\")\n",
    "print(f\"The current value of your {my_eth} ETH is ${my_eth_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total CRYPTO_VALUE = 47684.37\n"
     ]
    }
   ],
   "source": [
    "CRYPTO_VALUE = round(my_btc_value + my_eth_value, 2)\n",
    "print(f\"Total CRYPTO_VALUE = {CRYPTO_VALUE}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Investments Data Using Alpaca: `SPY` (stocks) and `AGG` (bonds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Current amount of shares\n",
    "my_spy = 50\n",
    "my_agg = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set Alpaca API key and secret\n",
    "# YOUR CODE HERE!\n",
    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\")\n",
    "alpaca_secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n",
    "\n",
    "\n",
    "# Create the Alpaca API object\n",
    "# YOUR CODE HERE!\n",
    "api = tradeapi.REST(\n",
    "    alpaca_api_key,\n",
    "    alpaca_secret_key,\n",
    "    api_version = \"v2\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-21 00:00:00-05:00</th>\n",
       "      <td>117.22</td>\n",
       "      <td>117.2985</td>\n",
       "      <td>117.14</td>\n",
       "      <td>117.26</td>\n",
       "      <td>5801029</td>\n",
       "      <td>384.49</td>\n",
       "      <td>384.95</td>\n",
       "      <td>383.25</td>\n",
       "      <td>384.2</td>\n",
       "      <td>41800991</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        SPY  \\\n",
       "                             open      high     low   close   volume    open   \n",
       "time                                                                           \n",
       "2021-01-21 00:00:00-05:00  117.22  117.2985  117.14  117.26  5801029  384.49   \n",
       "\n",
       "                                                            \n",
       "                             high     low  close    volume  \n",
       "time                                                        \n",
       "2021-01-21 00:00:00-05:00  384.95  383.25  384.2  41800991  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format current date as ISO format\n",
    "today = pd.Timestamp(\"2021-01-21\", tz=\"America/New_York\").isoformat()\n",
    "\n",
    "# Set the tickers\n",
    "tickers = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Set timeframe to '1D' for Alpaca API\n",
    "timeframe = \"1D\"\n",
    "\n",
    "# Get current closing prices for SPY and AGG\n",
    "df_portfolio = api.get_barset(\n",
    "    tickers,\n",
    "    timeframe,\n",
    "    start = today,\n",
    "    end = today\n",
    ").df\n",
    "\n",
    "# Preview DataFrame\n",
    "df_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current AGG closing price: $117.26\n",
      "Current SPY closing price: $384.2\n"
     ]
    }
   ],
   "source": [
    "# Pick AGG and SPY close prices\n",
    "agg_close_price = float(df_portfolio[\"AGG\"][\"close\"])\n",
    "spy_close_price = float(df_portfolio[\"SPY\"][\"close\"])\n",
    "\n",
    "# Print AGG and SPY close prices\n",
    "print(f\"Current AGG closing price: ${agg_close_price}\")\n",
    "print(f\"Current SPY closing price: ${spy_close_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 50 SPY shares is $19210.00\n",
      "The current value of your 200 AGG shares is $23452.00\n"
     ]
    }
   ],
   "source": [
    "# Compute the current value of shares\n",
    "my_spy_value = my_spy * spy_close_price\n",
    "my_agg_value = my_agg * agg_close_price\n",
    "\n",
    "# Print current value of share\n",
    "print(f\"The current value of your {my_spy} SPY shares is ${my_spy_value:0.2f}\")\n",
    "print(f\"The current value of your {my_agg} AGG shares is ${my_agg_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total STOCKS_VALUE = 42662.0\n"
     ]
    }
   ],
   "source": [
    "STOCKS_VALUE = my_spy_value + my_agg_value\n",
    "print(f\"Total STOCKS_VALUE = {STOCKS_VALUE}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Savings Health Analysis"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Shares</th>\n",
       "      <td>42662.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crypto</th>\n",
       "      <td>47684.37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          amount\n",
       "Shares  42662.00\n",
       "Crypto  47684.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set monthly household income\n",
    "monthly_income = 12000\n",
    "\n",
    "# Create savings DataFrame\n",
    "# Set current amount of shares data\n",
    "savings = {\n",
    "    \"amount\": [STOCKS_VALUE, CRYPTO_VALUE]\n",
    "}\n",
    "\n",
    "# Set the tickers\n",
    "tickers = [\"Shares\", \"Crypto\"]\n",
    "\n",
    "# Create the shares DataFrame\n",
    "df_savings = pd.DataFrame(savings, index=tickers)\n",
    "\n",
    "\n",
    "# Display savings DataFrame\n",
    "display(df_savings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot savings pie chart\n",
    "df_savings.plot.pie(y=\"amount\", title=\"Personal Savings Composition\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ideal emergency fund = $36000\n",
      "The total amount of savings = $90346.37\n",
      "CONGRATULATIOS!!! You have enough money in this fund!!!\n"
     ]
    }
   ],
   "source": [
    "# Set ideal emergency fund\n",
    "emergency_fund = monthly_income * 3\n",
    "print(f\"The ideal emergency fund = ${emergency_fund}\")\n",
    "\n",
    "# Calculate total amount of savings\n",
    "# YOUR CODE HERE!\n",
    "total_amount_of_savings = STOCKS_VALUE + CRYPTO_VALUE\n",
    "print(f\"The total amount of savings = ${total_amount_of_savings}\")\n",
    "\n",
    "under_goal = emergency_fund-total_amount_of_savings\n",
    "\n",
    "\n",
    "# Validate saving health\n",
    "if total_amount_of_savings > emergency_fund:\n",
    "    print(\"CONGRATULATIOS!!! You have enough money in this fund!!!\")\n",
    "elif total_amount_of_savings == emergency_fund:\n",
    "    print(\"CONGRATULATIOS for reaching this financial goal!\")\n",
    "else:\n",
    "    print(f\"By now you are {emergency_fund-total_amount_of_savings} away from reaching your goal\")\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The ideal emergency fund = $36,000.00 \n",
    "\n",
    "#### The total amount of savings = $87,879.78\n",
    "\n",
    "#### CONGRATULATIOS!!! You have enough money in this fund!!!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2 - Retirement Planning\n",
    "\n",
    "### Monte Carlo Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set start and end dates of five years back from today.\n",
    "# Sample results may vary from the solution based on the time frame chosen\n",
    "start_date = pd.Timestamp('2016-01-21', tz='America/New_York').isoformat()\n",
    "end_date = pd.Timestamp('2021-01-21', tz='America/New_York').isoformat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                         SPY  \\\n",
       "                             open     high       low   close   volume    open   \n",
       "time                                                                            \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926  186.21   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878  189.78   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189  189.93   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631  188.42   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148  189.58   \n",
       "\n",
       "                                                              \n",
       "                             high     low   close     volume  \n",
       "time                                                          \n",
       "2016-01-21 00:00:00-05:00  188.87  184.64  186.68  154918462  \n",
       "2016-01-22 00:00:00-05:00  190.76  188.88  190.49  132418951  \n",
       "2016-01-25 00:00:00-05:00  190.15  187.41  187.66   99219694  \n",
       "2016-01-26 00:00:00-05:00  190.53  188.02  190.18  115312517  \n",
       "2016-01-27 00:00:00-05:00  191.56  187.06  188.12  157060622  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get 5 years' worth of historical data for SPY and AGG\n",
    "# Set the tickers\n",
    "tickers2 = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Set timeframe to '1D' for Alpaca API\n",
    "timeframe2 = \"1D\"\n",
    "\n",
    "df_stock_data = api.get_barset(\n",
    "    tickers2,\n",
    "    timeframe2,\n",
    "    start=start_date,\n",
    "    end=end_date\n",
    ").df\n",
    "\n",
    "# Display sample data\n",
    "df_stock_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_30y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.40,.60],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                      \\\n",
       "                             open     high       low   close   volume   \n",
       "time                                                                    \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Printing the simulation input data\n",
    "Shares_portfolio_30y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.001944</td>\n",
       "      <td>1.003984</td>\n",
       "      <td>0.994197</td>\n",
       "      <td>1.000341</td>\n",
       "      <td>1.014306</td>\n",
       "      <td>0.995546</td>\n",
       "      <td>1.003711</td>\n",
       "      <td>1.000078</td>\n",
       "      <td>1.003999</td>\n",
       "      <td>1.003065</td>\n",
       "      <td>...</td>\n",
       "      <td>1.016908</td>\n",
       "      <td>0.994331</td>\n",
       "      <td>1.004254</td>\n",
       "      <td>0.982743</td>\n",
       "      <td>0.991263</td>\n",
       "      <td>0.984254</td>\n",
       "      <td>1.012427</td>\n",
       "      <td>0.998852</td>\n",
       "      <td>0.989153</td>\n",
       "      <td>1.003207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.005855</td>\n",
       "      <td>1.010552</td>\n",
       "      <td>0.987687</td>\n",
       "      <td>0.993731</td>\n",
       "      <td>1.019312</td>\n",
       "      <td>1.005051</td>\n",
       "      <td>1.010626</td>\n",
       "      <td>0.987785</td>\n",
       "      <td>0.994390</td>\n",
       "      <td>0.996260</td>\n",
       "      <td>...</td>\n",
       "      <td>1.024842</td>\n",
       "      <td>0.981293</td>\n",
       "      <td>1.000074</td>\n",
       "      <td>0.978407</td>\n",
       "      <td>0.986355</td>\n",
       "      <td>0.982393</td>\n",
       "      <td>1.003649</td>\n",
       "      <td>0.984314</td>\n",
       "      <td>0.975872</td>\n",
       "      <td>0.997457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.012169</td>\n",
       "      <td>1.023421</td>\n",
       "      <td>1.000295</td>\n",
       "      <td>0.996662</td>\n",
       "      <td>1.001944</td>\n",
       "      <td>1.020051</td>\n",
       "      <td>1.009295</td>\n",
       "      <td>0.991431</td>\n",
       "      <td>1.004451</td>\n",
       "      <td>0.996221</td>\n",
       "      <td>...</td>\n",
       "      <td>1.014934</td>\n",
       "      <td>0.985660</td>\n",
       "      <td>0.990587</td>\n",
       "      <td>0.971693</td>\n",
       "      <td>0.974813</td>\n",
       "      <td>0.993126</td>\n",
       "      <td>0.997987</td>\n",
       "      <td>0.994427</td>\n",
       "      <td>0.995397</td>\n",
       "      <td>1.000275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.017536</td>\n",
       "      <td>1.015634</td>\n",
       "      <td>0.990425</td>\n",
       "      <td>1.002404</td>\n",
       "      <td>0.996118</td>\n",
       "      <td>1.031054</td>\n",
       "      <td>1.003941</td>\n",
       "      <td>0.980338</td>\n",
       "      <td>1.003621</td>\n",
       "      <td>0.992150</td>\n",
       "      <td>...</td>\n",
       "      <td>1.008483</td>\n",
       "      <td>0.988593</td>\n",
       "      <td>0.992616</td>\n",
       "      <td>0.976851</td>\n",
       "      <td>0.983027</td>\n",
       "      <td>0.996696</td>\n",
       "      <td>0.982397</td>\n",
       "      <td>0.986038</td>\n",
       "      <td>0.991879</td>\n",
       "      <td>1.001794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>4.117636</td>\n",
       "      <td>23.694069</td>\n",
       "      <td>19.970570</td>\n",
       "      <td>76.734175</td>\n",
       "      <td>43.958484</td>\n",
       "      <td>10.178992</td>\n",
       "      <td>29.981129</td>\n",
       "      <td>37.618937</td>\n",
       "      <td>56.238850</td>\n",
       "      <td>21.195604</td>\n",
       "      <td>...</td>\n",
       "      <td>15.307220</td>\n",
       "      <td>3.771535</td>\n",
       "      <td>12.622449</td>\n",
       "      <td>8.046762</td>\n",
       "      <td>9.429621</td>\n",
       "      <td>18.999468</td>\n",
       "      <td>25.428375</td>\n",
       "      <td>15.357022</td>\n",
       "      <td>46.500044</td>\n",
       "      <td>44.444627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>4.138099</td>\n",
       "      <td>23.652024</td>\n",
       "      <td>20.047936</td>\n",
       "      <td>76.974688</td>\n",
       "      <td>44.110752</td>\n",
       "      <td>10.294662</td>\n",
       "      <td>30.183864</td>\n",
       "      <td>38.352783</td>\n",
       "      <td>56.582380</td>\n",
       "      <td>21.075488</td>\n",
       "      <td>...</td>\n",
       "      <td>15.135728</td>\n",
       "      <td>3.753107</td>\n",
       "      <td>12.535820</td>\n",
       "      <td>8.012204</td>\n",
       "      <td>9.409181</td>\n",
       "      <td>18.760249</td>\n",
       "      <td>25.110731</td>\n",
       "      <td>15.390758</td>\n",
       "      <td>46.326573</td>\n",
       "      <td>44.045018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>4.182729</td>\n",
       "      <td>23.571401</td>\n",
       "      <td>19.777431</td>\n",
       "      <td>76.874416</td>\n",
       "      <td>44.351680</td>\n",
       "      <td>10.314970</td>\n",
       "      <td>30.275791</td>\n",
       "      <td>39.041928</td>\n",
       "      <td>56.872730</td>\n",
       "      <td>21.149635</td>\n",
       "      <td>...</td>\n",
       "      <td>15.151497</td>\n",
       "      <td>3.752857</td>\n",
       "      <td>12.742368</td>\n",
       "      <td>8.006901</td>\n",
       "      <td>9.377292</td>\n",
       "      <td>18.478399</td>\n",
       "      <td>25.050585</td>\n",
       "      <td>15.517835</td>\n",
       "      <td>46.318098</td>\n",
       "      <td>43.771170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>4.141457</td>\n",
       "      <td>23.511096</td>\n",
       "      <td>19.584296</td>\n",
       "      <td>76.850464</td>\n",
       "      <td>44.070731</td>\n",
       "      <td>10.206463</td>\n",
       "      <td>30.098442</td>\n",
       "      <td>39.379581</td>\n",
       "      <td>57.145193</td>\n",
       "      <td>21.203183</td>\n",
       "      <td>...</td>\n",
       "      <td>15.222098</td>\n",
       "      <td>3.728490</td>\n",
       "      <td>12.735093</td>\n",
       "      <td>8.080951</td>\n",
       "      <td>9.390915</td>\n",
       "      <td>18.598129</td>\n",
       "      <td>25.005620</td>\n",
       "      <td>15.656564</td>\n",
       "      <td>46.728394</td>\n",
       "      <td>43.748248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7560</th>\n",
       "      <td>4.131318</td>\n",
       "      <td>23.688767</td>\n",
       "      <td>19.460682</td>\n",
       "      <td>76.444930</td>\n",
       "      <td>43.765326</td>\n",
       "      <td>10.237361</td>\n",
       "      <td>29.856509</td>\n",
       "      <td>39.200645</td>\n",
       "      <td>57.676360</td>\n",
       "      <td>20.837101</td>\n",
       "      <td>...</td>\n",
       "      <td>15.273354</td>\n",
       "      <td>3.788624</td>\n",
       "      <td>12.738023</td>\n",
       "      <td>8.085167</td>\n",
       "      <td>9.316063</td>\n",
       "      <td>18.797875</td>\n",
       "      <td>25.028662</td>\n",
       "      <td>15.626409</td>\n",
       "      <td>47.219665</td>\n",
       "      <td>43.595953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7561 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0          1          2          3          4          5    \\\n",
       "0     1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1     1.001944   1.003984   0.994197   1.000341   1.014306   0.995546   \n",
       "2     1.005855   1.010552   0.987687   0.993731   1.019312   1.005051   \n",
       "3     1.012169   1.023421   1.000295   0.996662   1.001944   1.020051   \n",
       "4     1.017536   1.015634   0.990425   1.002404   0.996118   1.031054   \n",
       "...        ...        ...        ...        ...        ...        ...   \n",
       "7556  4.117636  23.694069  19.970570  76.734175  43.958484  10.178992   \n",
       "7557  4.138099  23.652024  20.047936  76.974688  44.110752  10.294662   \n",
       "7558  4.182729  23.571401  19.777431  76.874416  44.351680  10.314970   \n",
       "7559  4.141457  23.511096  19.584296  76.850464  44.070731  10.206463   \n",
       "7560  4.131318  23.688767  19.460682  76.444930  43.765326  10.237361   \n",
       "\n",
       "            6          7          8          9    ...        490       491  \\\n",
       "0      1.000000   1.000000   1.000000   1.000000  ...   1.000000  1.000000   \n",
       "1      1.003711   1.000078   1.003999   1.003065  ...   1.016908  0.994331   \n",
       "2      1.010626   0.987785   0.994390   0.996260  ...   1.024842  0.981293   \n",
       "3      1.009295   0.991431   1.004451   0.996221  ...   1.014934  0.985660   \n",
       "4      1.003941   0.980338   1.003621   0.992150  ...   1.008483  0.988593   \n",
       "...         ...        ...        ...        ...  ...        ...       ...   \n",
       "7556  29.981129  37.618937  56.238850  21.195604  ...  15.307220  3.771535   \n",
       "7557  30.183864  38.352783  56.582380  21.075488  ...  15.135728  3.753107   \n",
       "7558  30.275791  39.041928  56.872730  21.149635  ...  15.151497  3.752857   \n",
       "7559  30.098442  39.379581  57.145193  21.203183  ...  15.222098  3.728490   \n",
       "7560  29.856509  39.200645  57.676360  20.837101  ...  15.273354  3.788624   \n",
       "\n",
       "            492       493       494        495        496        497  \\\n",
       "0      1.000000  1.000000  1.000000   1.000000   1.000000   1.000000   \n",
       "1      1.004254  0.982743  0.991263   0.984254   1.012427   0.998852   \n",
       "2      1.000074  0.978407  0.986355   0.982393   1.003649   0.984314   \n",
       "3      0.990587  0.971693  0.974813   0.993126   0.997987   0.994427   \n",
       "4      0.992616  0.976851  0.983027   0.996696   0.982397   0.986038   \n",
       "...         ...       ...       ...        ...        ...        ...   \n",
       "7556  12.622449  8.046762  9.429621  18.999468  25.428375  15.357022   \n",
       "7557  12.535820  8.012204  9.409181  18.760249  25.110731  15.390758   \n",
       "7558  12.742368  8.006901  9.377292  18.478399  25.050585  15.517835   \n",
       "7559  12.735093  8.080951  9.390915  18.598129  25.005620  15.656564   \n",
       "7560  12.738023  8.085167  9.316063  18.797875  25.028662  15.626409   \n",
       "\n",
       "            498        499  \n",
       "0      1.000000   1.000000  \n",
       "1      0.989153   1.003207  \n",
       "2      0.975872   0.997457  \n",
       "3      0.995397   1.000275  \n",
       "4      0.991879   1.001794  \n",
       "...         ...        ...  \n",
       "7556  46.500044  44.444627  \n",
       "7557  46.326573  44.045018  \n",
       "7558  46.318098  43.771170  \n",
       "7559  46.728394  43.748248  \n",
       "7560  47.219665  43.595953  \n",
       "\n",
       "[7561 rows x 500 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "Shares_portfolio_30y.calc_cumulative_return()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "line_plot = Shares_portfolio_30y.plot_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot = Shares_portfolio_30y.plot_distribution()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retirement Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean             24.056842\n",
      "std              17.210531\n",
      "min               2.981852\n",
      "25%              12.479639\n",
      "50%              19.279612\n",
      "75%              30.399660\n",
      "max             167.281370\n",
      "95% CI Lower      5.527900\n",
      "95% CI Upper     62.042861\n",
      "Name: 7560, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_30y_tbl = Shares_portfolio_30y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_30y_tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the 95% lower and upper confidence intervals based on a `$20,000` initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $20000 in the portfolio over the next 30 years will end within in the range of $110558.01 and $1240857.22\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $20,000\n",
    "Shares_portfolio_30y_tbl_lower = round(Shares_portfolio_30y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_30y_tbl_upper = round(Shares_portfolio_30y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_30y_tbl_lower} and ${Shares_portfolio_30y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 20000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $112379.88\n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $1189679.27"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the `95%` lower and upper confidence intervals based on a `50%` increase in the initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $30000.0 in the portfolio over the next 30 years will end within in the range of $165837.01 and $1861285.83\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 1.5\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $30,000\n",
    "Shares_portfolio_30y_tbl_lower2 = round(Shares_portfolio_30y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_30y_tbl_upper2 = round(Shares_portfolio_30y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_30y_tbl_lower2} and ${Shares_portfolio_30y_tbl_upper2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 30000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $168569.83 \n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $1784518.91"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Challenge - Early Retirement\n",
    "\n",
    "\n",
    "### Five Years Retirement Option"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 5 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_5y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.30,.70],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                      \\\n",
       "                             open     high       low   close   volume   \n",
       "time                                                                    \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 5 years cumulative returns\n",
    "Shares_portfolio_5y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.002037</td>\n",
       "      <td>1.027069</td>\n",
       "      <td>0.997245</td>\n",
       "      <td>0.983908</td>\n",
       "      <td>1.001085</td>\n",
       "      <td>0.986739</td>\n",
       "      <td>0.996899</td>\n",
       "      <td>1.003588</td>\n",
       "      <td>0.995570</td>\n",
       "      <td>0.995463</td>\n",
       "      <td>...</td>\n",
       "      <td>1.008026</td>\n",
       "      <td>1.001606</td>\n",
       "      <td>0.993675</td>\n",
       "      <td>1.002762</td>\n",
       "      <td>0.993527</td>\n",
       "      <td>0.989173</td>\n",
       "      <td>0.987382</td>\n",
       "      <td>0.989789</td>\n",
       "      <td>0.989606</td>\n",
       "      <td>0.990843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.013450</td>\n",
       "      <td>1.034944</td>\n",
       "      <td>1.003773</td>\n",
       "      <td>0.987805</td>\n",
       "      <td>1.002480</td>\n",
       "      <td>0.988609</td>\n",
       "      <td>0.984519</td>\n",
       "      <td>1.001070</td>\n",
       "      <td>0.999169</td>\n",
       "      <td>0.998367</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000820</td>\n",
       "      <td>1.006146</td>\n",
       "      <td>1.004306</td>\n",
       "      <td>0.993197</td>\n",
       "      <td>0.987051</td>\n",
       "      <td>0.995931</td>\n",
       "      <td>0.983818</td>\n",
       "      <td>0.984429</td>\n",
       "      <td>0.973876</td>\n",
       "      <td>0.986920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.010850</td>\n",
       "      <td>1.024754</td>\n",
       "      <td>0.991625</td>\n",
       "      <td>0.982398</td>\n",
       "      <td>1.018898</td>\n",
       "      <td>0.973614</td>\n",
       "      <td>0.993108</td>\n",
       "      <td>1.006416</td>\n",
       "      <td>0.994155</td>\n",
       "      <td>0.998833</td>\n",
       "      <td>...</td>\n",
       "      <td>1.008983</td>\n",
       "      <td>1.005312</td>\n",
       "      <td>0.994445</td>\n",
       "      <td>0.988698</td>\n",
       "      <td>1.009914</td>\n",
       "      <td>0.987299</td>\n",
       "      <td>0.982735</td>\n",
       "      <td>0.973147</td>\n",
       "      <td>0.968110</td>\n",
       "      <td>0.994806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.002446</td>\n",
       "      <td>1.026045</td>\n",
       "      <td>0.987475</td>\n",
       "      <td>0.977518</td>\n",
       "      <td>1.022171</td>\n",
       "      <td>0.964387</td>\n",
       "      <td>0.986940</td>\n",
       "      <td>1.012896</td>\n",
       "      <td>0.993026</td>\n",
       "      <td>0.990266</td>\n",
       "      <td>...</td>\n",
       "      <td>1.014207</td>\n",
       "      <td>1.002771</td>\n",
       "      <td>0.990515</td>\n",
       "      <td>1.010361</td>\n",
       "      <td>1.004242</td>\n",
       "      <td>0.981498</td>\n",
       "      <td>0.979304</td>\n",
       "      <td>0.989219</td>\n",
       "      <td>0.960896</td>\n",
       "      <td>0.997739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>2.299970</td>\n",
       "      <td>1.658527</td>\n",
       "      <td>2.016060</td>\n",
       "      <td>2.402224</td>\n",
       "      <td>1.157528</td>\n",
       "      <td>1.539855</td>\n",
       "      <td>1.669082</td>\n",
       "      <td>1.264576</td>\n",
       "      <td>1.814352</td>\n",
       "      <td>2.362865</td>\n",
       "      <td>...</td>\n",
       "      <td>1.539882</td>\n",
       "      <td>1.427665</td>\n",
       "      <td>1.687780</td>\n",
       "      <td>1.501543</td>\n",
       "      <td>2.073990</td>\n",
       "      <td>2.508984</td>\n",
       "      <td>2.318941</td>\n",
       "      <td>1.648993</td>\n",
       "      <td>1.499032</td>\n",
       "      <td>1.455329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>2.289894</td>\n",
       "      <td>1.676419</td>\n",
       "      <td>2.017933</td>\n",
       "      <td>2.399676</td>\n",
       "      <td>1.139629</td>\n",
       "      <td>1.541180</td>\n",
       "      <td>1.665390</td>\n",
       "      <td>1.282201</td>\n",
       "      <td>1.789548</td>\n",
       "      <td>2.360233</td>\n",
       "      <td>...</td>\n",
       "      <td>1.535905</td>\n",
       "      <td>1.423090</td>\n",
       "      <td>1.701237</td>\n",
       "      <td>1.507280</td>\n",
       "      <td>2.078125</td>\n",
       "      <td>2.533733</td>\n",
       "      <td>2.333240</td>\n",
       "      <td>1.648025</td>\n",
       "      <td>1.503980</td>\n",
       "      <td>1.458065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>2.321147</td>\n",
       "      <td>1.698595</td>\n",
       "      <td>2.014159</td>\n",
       "      <td>2.364939</td>\n",
       "      <td>1.128506</td>\n",
       "      <td>1.547446</td>\n",
       "      <td>1.650854</td>\n",
       "      <td>1.266581</td>\n",
       "      <td>1.772524</td>\n",
       "      <td>2.363156</td>\n",
       "      <td>...</td>\n",
       "      <td>1.530043</td>\n",
       "      <td>1.426841</td>\n",
       "      <td>1.715162</td>\n",
       "      <td>1.520359</td>\n",
       "      <td>2.089661</td>\n",
       "      <td>2.536910</td>\n",
       "      <td>2.356819</td>\n",
       "      <td>1.641075</td>\n",
       "      <td>1.523245</td>\n",
       "      <td>1.451468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1259</th>\n",
       "      <td>2.295862</td>\n",
       "      <td>1.719702</td>\n",
       "      <td>2.013466</td>\n",
       "      <td>2.364965</td>\n",
       "      <td>1.153796</td>\n",
       "      <td>1.546520</td>\n",
       "      <td>1.652451</td>\n",
       "      <td>1.258315</td>\n",
       "      <td>1.766662</td>\n",
       "      <td>2.373309</td>\n",
       "      <td>...</td>\n",
       "      <td>1.522326</td>\n",
       "      <td>1.432808</td>\n",
       "      <td>1.725068</td>\n",
       "      <td>1.518852</td>\n",
       "      <td>2.077694</td>\n",
       "      <td>2.546005</td>\n",
       "      <td>2.343972</td>\n",
       "      <td>1.631648</td>\n",
       "      <td>1.507008</td>\n",
       "      <td>1.440711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1260</th>\n",
       "      <td>2.303065</td>\n",
       "      <td>1.724395</td>\n",
       "      <td>2.008680</td>\n",
       "      <td>2.369649</td>\n",
       "      <td>1.148766</td>\n",
       "      <td>1.543961</td>\n",
       "      <td>1.653306</td>\n",
       "      <td>1.242273</td>\n",
       "      <td>1.767933</td>\n",
       "      <td>2.364605</td>\n",
       "      <td>...</td>\n",
       "      <td>1.520949</td>\n",
       "      <td>1.424427</td>\n",
       "      <td>1.718854</td>\n",
       "      <td>1.519546</td>\n",
       "      <td>2.066464</td>\n",
       "      <td>2.542558</td>\n",
       "      <td>2.342072</td>\n",
       "      <td>1.628754</td>\n",
       "      <td>1.513636</td>\n",
       "      <td>1.422544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1261 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6    \\\n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
       "1     1.002037  1.027069  0.997245  0.983908  1.001085  0.986739  0.996899   \n",
       "2     1.013450  1.034944  1.003773  0.987805  1.002480  0.988609  0.984519   \n",
       "3     1.010850  1.024754  0.991625  0.982398  1.018898  0.973614  0.993108   \n",
       "4     1.002446  1.026045  0.987475  0.977518  1.022171  0.964387  0.986940   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "1256  2.299970  1.658527  2.016060  2.402224  1.157528  1.539855  1.669082   \n",
       "1257  2.289894  1.676419  2.017933  2.399676  1.139629  1.541180  1.665390   \n",
       "1258  2.321147  1.698595  2.014159  2.364939  1.128506  1.547446  1.650854   \n",
       "1259  2.295862  1.719702  2.013466  2.364965  1.153796  1.546520  1.652451   \n",
       "1260  2.303065  1.724395  2.008680  2.369649  1.148766  1.543961  1.653306   \n",
       "\n",
       "           7         8         9    ...       490       491       492  \\\n",
       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
       "1     1.003588  0.995570  0.995463  ...  1.008026  1.001606  0.993675   \n",
       "2     1.001070  0.999169  0.998367  ...  1.000820  1.006146  1.004306   \n",
       "3     1.006416  0.994155  0.998833  ...  1.008983  1.005312  0.994445   \n",
       "4     1.012896  0.993026  0.990266  ...  1.014207  1.002771  0.990515   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "1256  1.264576  1.814352  2.362865  ...  1.539882  1.427665  1.687780   \n",
       "1257  1.282201  1.789548  2.360233  ...  1.535905  1.423090  1.701237   \n",
       "1258  1.266581  1.772524  2.363156  ...  1.530043  1.426841  1.715162   \n",
       "1259  1.258315  1.766662  2.373309  ...  1.522326  1.432808  1.725068   \n",
       "1260  1.242273  1.767933  2.364605  ...  1.520949  1.424427  1.718854   \n",
       "\n",
       "           493       494       495       496       497       498       499  \n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
       "1     1.002762  0.993527  0.989173  0.987382  0.989789  0.989606  0.990843  \n",
       "2     0.993197  0.987051  0.995931  0.983818  0.984429  0.973876  0.986920  \n",
       "3     0.988698  1.009914  0.987299  0.982735  0.973147  0.968110  0.994806  \n",
       "4     1.010361  1.004242  0.981498  0.979304  0.989219  0.960896  0.997739  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "1256  1.501543  2.073990  2.508984  2.318941  1.648993  1.499032  1.455329  \n",
       "1257  1.507280  2.078125  2.533733  2.333240  1.648025  1.503980  1.458065  \n",
       "1258  1.520359  2.089661  2.536910  2.356819  1.641075  1.523245  1.451468  \n",
       "1259  1.518852  2.077694  2.546005  2.343972  1.631648  1.507008  1.440711  \n",
       "1260  1.519546  2.066464  2.542558  2.342072  1.628754  1.513636  1.422544  \n",
       "\n",
       "[1261 rows x 500 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "Shares_portfolio_5y.calc_cumulative_return() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot_5y = Shares_portfolio_5y.plot_distribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean              1.779568\n",
      "std               0.540206\n",
      "min               0.706361\n",
      "25%               1.404862\n",
      "50%               1.693266\n",
      "75%               2.076144\n",
      "max               4.594175\n",
      "95% CI Lower      0.947746\n",
      "95% CI Upper      3.096595\n",
      "Name: 1260, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_5y_tbl = Shares_portfolio_5y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_5y_tbl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $60000 in the portfolio over the next 5 years will end within in the range of $56864.79 and $185795.7\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 3\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $60,000\n",
    "Shares_portfolio_5y_tbl_lower = round(Shares_portfolio_5y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_5y_tbl_upper = round(Shares_portfolio_5y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 5 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_5y_tbl_lower} and ${Shares_portfolio_5y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 60000\n",
    "\n",
    "** Shares_portfolio_5y_tbl_lower = $62108.18\n",
    "\n",
    "** Shares_portfolio_5y_tbl_upper = $162182.16"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ten Years Retirement Option"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 10 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_10y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.30,.70],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                      \\\n",
       "                             open     high       low   close   volume   \n",
       "time                                                                    \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 10 years cumulative returns\n",
    "Shares_portfolio_10y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.992798</td>\n",
       "      <td>1.004174</td>\n",
       "      <td>0.998871</td>\n",
       "      <td>0.994171</td>\n",
       "      <td>1.014590</td>\n",
       "      <td>0.999357</td>\n",
       "      <td>1.017942</td>\n",
       "      <td>0.995017</td>\n",
       "      <td>1.009653</td>\n",
       "      <td>1.013942</td>\n",
       "      <td>...</td>\n",
       "      <td>0.993616</td>\n",
       "      <td>0.996826</td>\n",
       "      <td>1.003662</td>\n",
       "      <td>0.995449</td>\n",
       "      <td>0.999209</td>\n",
       "      <td>0.984884</td>\n",
       "      <td>1.002173</td>\n",
       "      <td>0.993822</td>\n",
       "      <td>0.996749</td>\n",
       "      <td>0.990097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.990990</td>\n",
       "      <td>1.001792</td>\n",
       "      <td>1.000679</td>\n",
       "      <td>0.991196</td>\n",
       "      <td>1.035715</td>\n",
       "      <td>1.000461</td>\n",
       "      <td>1.013520</td>\n",
       "      <td>0.990778</td>\n",
       "      <td>1.004895</td>\n",
       "      <td>1.015475</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999048</td>\n",
       "      <td>1.002232</td>\n",
       "      <td>1.007931</td>\n",
       "      <td>0.998805</td>\n",
       "      <td>0.986407</td>\n",
       "      <td>0.979628</td>\n",
       "      <td>1.007905</td>\n",
       "      <td>0.992547</td>\n",
       "      <td>1.003762</td>\n",
       "      <td>0.996412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.006181</td>\n",
       "      <td>0.991890</td>\n",
       "      <td>1.006842</td>\n",
       "      <td>0.981447</td>\n",
       "      <td>1.042419</td>\n",
       "      <td>1.004710</td>\n",
       "      <td>1.011485</td>\n",
       "      <td>0.991600</td>\n",
       "      <td>0.989269</td>\n",
       "      <td>1.022641</td>\n",
       "      <td>...</td>\n",
       "      <td>1.007288</td>\n",
       "      <td>1.006009</td>\n",
       "      <td>1.000416</td>\n",
       "      <td>1.009642</td>\n",
       "      <td>0.989858</td>\n",
       "      <td>0.986465</td>\n",
       "      <td>1.009962</td>\n",
       "      <td>0.992139</td>\n",
       "      <td>0.997176</td>\n",
       "      <td>1.012262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.012520</td>\n",
       "      <td>1.000683</td>\n",
       "      <td>0.998233</td>\n",
       "      <td>0.992210</td>\n",
       "      <td>1.048480</td>\n",
       "      <td>1.009613</td>\n",
       "      <td>1.027050</td>\n",
       "      <td>0.993346</td>\n",
       "      <td>0.991803</td>\n",
       "      <td>1.016583</td>\n",
       "      <td>...</td>\n",
       "      <td>1.007272</td>\n",
       "      <td>1.026198</td>\n",
       "      <td>1.006250</td>\n",
       "      <td>1.006396</td>\n",
       "      <td>0.986810</td>\n",
       "      <td>0.969364</td>\n",
       "      <td>1.005980</td>\n",
       "      <td>0.989377</td>\n",
       "      <td>0.992394</td>\n",
       "      <td>1.009776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2516</th>\n",
       "      <td>3.878237</td>\n",
       "      <td>4.436823</td>\n",
       "      <td>1.938838</td>\n",
       "      <td>3.678872</td>\n",
       "      <td>2.988387</td>\n",
       "      <td>4.117358</td>\n",
       "      <td>1.646344</td>\n",
       "      <td>5.182630</td>\n",
       "      <td>2.480916</td>\n",
       "      <td>3.562447</td>\n",
       "      <td>...</td>\n",
       "      <td>2.097141</td>\n",
       "      <td>2.386738</td>\n",
       "      <td>1.951618</td>\n",
       "      <td>3.476066</td>\n",
       "      <td>1.287673</td>\n",
       "      <td>1.435427</td>\n",
       "      <td>2.533509</td>\n",
       "      <td>7.112072</td>\n",
       "      <td>2.614744</td>\n",
       "      <td>2.770213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2517</th>\n",
       "      <td>3.908956</td>\n",
       "      <td>4.429176</td>\n",
       "      <td>1.915474</td>\n",
       "      <td>3.685734</td>\n",
       "      <td>2.975030</td>\n",
       "      <td>4.136510</td>\n",
       "      <td>1.661328</td>\n",
       "      <td>5.141277</td>\n",
       "      <td>2.503639</td>\n",
       "      <td>3.591032</td>\n",
       "      <td>...</td>\n",
       "      <td>2.099205</td>\n",
       "      <td>2.392462</td>\n",
       "      <td>1.967875</td>\n",
       "      <td>3.452693</td>\n",
       "      <td>1.264396</td>\n",
       "      <td>1.439400</td>\n",
       "      <td>2.549241</td>\n",
       "      <td>7.049163</td>\n",
       "      <td>2.626246</td>\n",
       "      <td>2.800391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2518</th>\n",
       "      <td>3.860168</td>\n",
       "      <td>4.482083</td>\n",
       "      <td>1.903038</td>\n",
       "      <td>3.678206</td>\n",
       "      <td>2.936264</td>\n",
       "      <td>4.161840</td>\n",
       "      <td>1.667120</td>\n",
       "      <td>5.073116</td>\n",
       "      <td>2.530767</td>\n",
       "      <td>3.598336</td>\n",
       "      <td>...</td>\n",
       "      <td>2.088122</td>\n",
       "      <td>2.389649</td>\n",
       "      <td>1.969624</td>\n",
       "      <td>3.495828</td>\n",
       "      <td>1.266854</td>\n",
       "      <td>1.454555</td>\n",
       "      <td>2.552452</td>\n",
       "      <td>7.122635</td>\n",
       "      <td>2.628482</td>\n",
       "      <td>2.799118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2519</th>\n",
       "      <td>3.802008</td>\n",
       "      <td>4.480743</td>\n",
       "      <td>1.897080</td>\n",
       "      <td>3.703624</td>\n",
       "      <td>2.926605</td>\n",
       "      <td>4.147445</td>\n",
       "      <td>1.663551</td>\n",
       "      <td>5.061629</td>\n",
       "      <td>2.537367</td>\n",
       "      <td>3.599251</td>\n",
       "      <td>...</td>\n",
       "      <td>2.100883</td>\n",
       "      <td>2.420100</td>\n",
       "      <td>1.973858</td>\n",
       "      <td>3.490598</td>\n",
       "      <td>1.252197</td>\n",
       "      <td>1.448314</td>\n",
       "      <td>2.605820</td>\n",
       "      <td>7.068124</td>\n",
       "      <td>2.630028</td>\n",
       "      <td>2.778110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>3.774948</td>\n",
       "      <td>4.465866</td>\n",
       "      <td>1.888825</td>\n",
       "      <td>3.719340</td>\n",
       "      <td>2.950946</td>\n",
       "      <td>4.172246</td>\n",
       "      <td>1.658842</td>\n",
       "      <td>5.120025</td>\n",
       "      <td>2.547425</td>\n",
       "      <td>3.590417</td>\n",
       "      <td>...</td>\n",
       "      <td>2.117688</td>\n",
       "      <td>2.384770</td>\n",
       "      <td>1.975338</td>\n",
       "      <td>3.460081</td>\n",
       "      <td>1.236413</td>\n",
       "      <td>1.452069</td>\n",
       "      <td>2.582956</td>\n",
       "      <td>7.117890</td>\n",
       "      <td>2.646953</td>\n",
       "      <td>2.770197</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2521 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6    \\\n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
       "1     0.992798  1.004174  0.998871  0.994171  1.014590  0.999357  1.017942   \n",
       "2     0.990990  1.001792  1.000679  0.991196  1.035715  1.000461  1.013520   \n",
       "3     1.006181  0.991890  1.006842  0.981447  1.042419  1.004710  1.011485   \n",
       "4     1.012520  1.000683  0.998233  0.992210  1.048480  1.009613  1.027050   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "2516  3.878237  4.436823  1.938838  3.678872  2.988387  4.117358  1.646344   \n",
       "2517  3.908956  4.429176  1.915474  3.685734  2.975030  4.136510  1.661328   \n",
       "2518  3.860168  4.482083  1.903038  3.678206  2.936264  4.161840  1.667120   \n",
       "2519  3.802008  4.480743  1.897080  3.703624  2.926605  4.147445  1.663551   \n",
       "2520  3.774948  4.465866  1.888825  3.719340  2.950946  4.172246  1.658842   \n",
       "\n",
       "           7         8         9    ...       490       491       492  \\\n",
       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
       "1     0.995017  1.009653  1.013942  ...  0.993616  0.996826  1.003662   \n",
       "2     0.990778  1.004895  1.015475  ...  0.999048  1.002232  1.007931   \n",
       "3     0.991600  0.989269  1.022641  ...  1.007288  1.006009  1.000416   \n",
       "4     0.993346  0.991803  1.016583  ...  1.007272  1.026198  1.006250   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "2516  5.182630  2.480916  3.562447  ...  2.097141  2.386738  1.951618   \n",
       "2517  5.141277  2.503639  3.591032  ...  2.099205  2.392462  1.967875   \n",
       "2518  5.073116  2.530767  3.598336  ...  2.088122  2.389649  1.969624   \n",
       "2519  5.061629  2.537367  3.599251  ...  2.100883  2.420100  1.973858   \n",
       "2520  5.120025  2.547425  3.590417  ...  2.117688  2.384770  1.975338   \n",
       "\n",
       "           493       494       495       496       497       498       499  \n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
       "1     0.995449  0.999209  0.984884  1.002173  0.993822  0.996749  0.990097  \n",
       "2     0.998805  0.986407  0.979628  1.007905  0.992547  1.003762  0.996412  \n",
       "3     1.009642  0.989858  0.986465  1.009962  0.992139  0.997176  1.012262  \n",
       "4     1.006396  0.986810  0.969364  1.005980  0.989377  0.992394  1.009776  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "2516  3.476066  1.287673  1.435427  2.533509  7.112072  2.614744  2.770213  \n",
       "2517  3.452693  1.264396  1.439400  2.549241  7.049163  2.626246  2.800391  \n",
       "2518  3.495828  1.266854  1.454555  2.552452  7.122635  2.628482  2.799118  \n",
       "2519  3.490598  1.252197  1.448314  2.605820  7.068124  2.630028  2.778110  \n",
       "2520  3.460081  1.236413  1.452069  2.582956  7.117890  2.646953  2.770197  \n",
       "\n",
       "[2521 rows x 500 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "Shares_portfolio_10y.calc_cumulative_return() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot_10y = Shares_portfolio_10y.plot_distribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean              3.182204\n",
      "std               1.419071\n",
      "min               1.059333\n",
      "25%               2.164433\n",
      "50%               2.833124\n",
      "75%               3.850577\n",
      "max               9.647647\n",
      "95% CI Lower      1.341157\n",
      "95% CI Upper      6.610016\n",
      "Name: 2520, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_10y_tbl = Shares_portfolio_10y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_10y_tbl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $60000 in the portfolio over the next 10 years will end within in the range of $80469.4 and $396600.94\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 3\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $60,000\n",
    "Shares_portfolio_10y_tbl_lower = round(Shares_portfolio_10y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_10y_tbl_upper = round(Shares_portfolio_10y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 10 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_10y_tbl_lower} and ${Shares_portfolio_10y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 60000\n",
    "\n",
    "** Shares_portfolio_10y_tbl_lower = $88698.37\n",
    "\n",
    "** Shares_portfolio_10y_tbl_upper = $389563.69"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part 1: Personal Finance Planner\n",
    "The first will be a personal finance planner that will allow users to visualize their savings composed by investments in shares and cryptocurrencies *to assess if they have enough money as an emergency fund*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The current value for every union member's Savings Portfolio \n",
    "\n",
    "* **Crypto currencies:** \n",
    "\n",
    "** 1.2 BTC = $38077.20 \n",
    "\n",
    "** 5.3 ETH = $7140.58\n",
    "\n",
    "** Total in Cryptocurrencies = $45217.78\n",
    "\n",
    "\n",
    "* **Stocks and Bonds:**\n",
    "\n",
    "** 50 shares of SPY =$19,210.00 \n",
    "\n",
    "** 200 shares ofAGG = $23452.00\n",
    "\n",
    "** Total in Stocks and Bonds = $42662.0 \n",
    "\n",
    "\n",
    "* **The total amount of savings = $87879.78**\n",
    "\n",
    "* **Emergency fund = $36000.00**\n",
    "\n",
    "** The current Total Value for the Savings Portfolio is over passing the Goal for the Emergency fund of 3 months of  salary. \n",
    "\n",
    "* **With this result we can conclude the investment in a diversified market was good advice and helped the members of the union to enhance their financial health, and have more money than the emergency fund.**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_____________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part 2: Personal Finance Planner\n",
    "The second tool will be a retirement planning tool that will use the Alpaca API to fetch historical closing prices for a retirement portfolio composed of stocks and bonds, then run Monte Carlo simulations to project the portfolio performance at 30 years. You will then use the Monte Carlo data to calculate the expected portfolio returns given a specific initial investment amount."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* For the first retirement option, we have an Weight Investment Distribution: 60% SPY & 40% AGG for 30 years with 2 different initial investments:\n",
    "\n",
    "* initial_investment = 20000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $112379.88\n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $1189679.27\n",
    "\n",
    "* initial_investment = 30000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $168569.83 \n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $1784518.91\n",
    "\n",
    "**Since Weight Investment Distribution (60% SPY & 40% AGG) is the same in both cases, the ratio investment/earnings  is linear, as big is initial investment as big the earnings you get. With that said, I would recommend an Initial Investment of $30000.00, due the earnings is about 50% more.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_____________________________________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optional Challenge - Early Retirement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* To adjust the retirement plan for an earlier than normal retirement I evaluated 2 options for a 5 years early retirement: \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 1: initial_investment = 60000 , Investment distribution: 60% SPY & 40% AGG\n",
    "\n",
    "** Shares_portfolio_5y_tbl_lower = $60752.12\n",
    "\n",
    "** Shares_portfolio_5y_tbl_upper = $156270.84"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 2: initial_investment = 60000 , Investment distribution: 70% SPY & 30% AGG\n",
    "\n",
    "** Shares_portfolio_5y_tbl_lower = $62108.18\n",
    "\n",
    "** Shares_portfolio_5y_tbl_upper = $162182.16"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing the risk did not offer a major enhance for earning for a 5 years Portfolio. I do not recommend taking the second option. I will go conservative keeping option 1: initial_investment = 60000 , Investment distribution: 60% SPY & 40% AGG."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* To adjust the retirement plan for an earlier than normal retirement I evaluated 2 options for a 10 years early retirement: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 1: initial_investment = 60000  , Investment distribution: 60% SPY & 40% AGG\n",
    "\n",
    "** Shares_portfolio_10y_tbl_lower = $78,913.61\n",
    "\n",
    "** Shares_portfolio_10y_tbl_upper = $312,939.65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 2: initial_investment = 60000 , Investment distribution: 70% SPY & 30% AGG\n",
    "\n",
    "** Shares_portfolio_10y_tbl_lower = $88698.37\n",
    "\n",
    "** Shares_portfolio_10y_tbl_upper = $389563.69"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing the risk did offer a major enhance in earning for a 10 years Portfolio. I do recommend to take option 2: initial_investment = 60000 ,  Investment distribution: 70% SPY & 30% AGG."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see in these options time is the major factor affecting the final results. As longer the time for the portfolio, the bigger the earnings.\n",
    "\n",
    "To sum it up, my final recommendation for an Early Retirement is Option 2 (initial_investment = $60000, Weight Investment Distribution: 70% SPY & 30% AGG)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit 5 - Financial Planning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial imports\n",
    "import os\n",
    "import requests\n",
    "import pandas as pd\n",
    "from dotenv import load_dotenv\n",
    "import alpaca_trade_api as tradeapi\n",
    "from MCForecastTools import MCSimulation\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load .env enviroment variables\n",
    "load_dotenv()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1 - Personal Finance Planner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Crypto Prices Using the `requests` Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set current amount of crypto assets\n",
    "# YOUR CODE HERE!\n",
    "my_btc = 1.2\n",
    "my_eth = 5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crypto API URLs\n",
    "btc_url = \"https://api.alternative.me/v2/ticker/Bitcoin/?convert=CAD\"\n",
    "eth_url = \"https://api.alternative.me/v2/ticker/Ethereum/?convert=CAD\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n",
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "resp_data_btc = requests.get(btc_url)\n",
    "resp_data_eth = requests.get(eth_url)\n",
    "print(resp_data_btc)\n",
    "print(resp_data_eth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      " \"data\": {\n",
      "  \"1\": {\n",
      "   \"id\": 1,\n",
      "   \"name\": \"Bitcoin\",\n",
      "   \"symbol\": \"BTC\",\n",
      "   \"website_slug\": \"bitcoin\",\n",
      "   \"rank\": 1,\n",
      "   \"circulating_supply\": 18612037,\n",
      "   \"total_supply\": 18612037,\n",
      "   \"max_supply\": 21000000,\n",
      "   \"quotes\": {\n",
      "    \"USD\": {\n",
      "     \"price\": 30554.0,\n",
      "     \"volume_24h\": 46817553577,\n",
      "     \"market_cap\": 569502600810,\n",
      "     \"percentage_change_1h\": -1.00612657911168,\n",
      "     \"percentage_change_24h\": -4.67216508429326,\n",
      "     \"percentage_change_7d\": -15.3748182972684,\n",
      "     \"percent_change_1h\": -1.00612657911168,\n",
      "     \"percent_change_24h\": -4.67216508429326,\n",
      "     \"percent_change_7d\": -15.3748182972684\n",
      "    },\n",
      "    \"CAD\": {\n",
      "     \"price\": 39032.735,\n",
      "     \"volume_24h\": 59809424694.6175,\n",
      "     \"market_cap\": 727539572534.775,\n",
      "     \"percent_change_1h\": -1.00612657911168,\n",
      "     \"percent_change_24h\": -4.67216508429326,\n",
      "     \"percent_change_7d\": -15.3748182972684\n",
      "    }\n",
      "   },\n",
      "   \"last_updated\": 1611768850\n",
      "  }\n",
      " },\n",
      " \"metadata\": {\n",
      "  \"timestamp\": 1611768850,\n",
      "  \"num_cryptocurrencies\": 1371,\n",
      "  \"error\": null\n",
      " }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "resp_data_btc = requests.get(btc_url).json()\n",
    "print(json.dumps(resp_data_btc, indent=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bitcoin current price is $ 30554.0\n"
     ]
    }
   ],
   "source": [
    "BTC_price = resp_data_btc[\"data\"][\"1\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "print(f\"Bitcoin current price is $ {BTC_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      " \"data\": {\n",
      "  \"1027\": {\n",
      "   \"id\": 1027,\n",
      "   \"name\": \"Ethereum\",\n",
      "   \"symbol\": \"ETH\",\n",
      "   \"website_slug\": \"ethereum\",\n",
      "   \"rank\": 2,\n",
      "   \"circulating_supply\": 114426654,\n",
      "   \"total_supply\": 114426654,\n",
      "   \"max_supply\": 0,\n",
      "   \"quotes\": {\n",
      "    \"USD\": {\n",
      "     \"price\": 1269.22,\n",
      "     \"volume_24h\": 37039629434,\n",
      "     \"market_cap\": 145555910030,\n",
      "     \"percentage_change_1h\": -2.62505627874899,\n",
      "     \"percentage_change_24h\": -3.64915174382545,\n",
      "     \"percentage_change_7d\": -8.25921277999462,\n",
      "     \"percent_change_1h\": -2.62505627874899,\n",
      "     \"percent_change_24h\": -3.64915174382545,\n",
      "     \"percent_change_7d\": -8.25921277999462\n",
      "    },\n",
      "    \"CAD\": {\n",
      "     \"price\": 1621.42855,\n",
      "     \"volume_24h\": 47318126601.935,\n",
      "     \"market_cap\": 185947675063.325,\n",
      "     \"percent_change_1h\": -2.62505627874899,\n",
      "     \"percent_change_24h\": -3.64915174382545,\n",
      "     \"percent_change_7d\": -8.25921277999462\n",
      "    }\n",
      "   },\n",
      "   \"last_updated\": 1611768797\n",
      "  }\n",
      " },\n",
      " \"metadata\": {\n",
      "  \"timestamp\": 1611768797,\n",
      "  \"num_cryptocurrencies\": 1371,\n",
      "  \"error\": null\n",
      " }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "resp_data_eth = requests.get(eth_url).json()\n",
    "print(json.dumps(resp_data_eth, indent=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ethereum current price is $ 1269.22\n"
     ]
    }
   ],
   "source": [
    "ETH_price = resp_data_eth[\"data\"][\"1027\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "print(f\"Ethereum current price is $ {ETH_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 1.2 BTC is $36664.80\n",
      "The current value of your 5.3 ETH is $6726.87\n"
     ]
    }
   ],
   "source": [
    "# Fetch current BTC price\n",
    "BTC_price = resp_data_btc[\"data\"][\"1\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "\n",
    "# Fetch current ETH price\n",
    "ETH_price = resp_data_eth[\"data\"][\"1027\"][\"quotes\"][\"USD\"][\"price\"]\n",
    "\n",
    "# Compute current value of my crpto\n",
    "# YOUR CODE HERE!\n",
    "my_btc_value = my_btc * BTC_price\n",
    "my_eth_value = my_eth * ETH_price\n",
    "# Print current crypto wallet balance\n",
    "print(f\"The current value of your {my_btc} BTC is ${my_btc_value:0.2f}\")\n",
    "print(f\"The current value of your {my_eth} ETH is ${my_eth_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total CRYPTO_VALUE = 43391.67\n"
     ]
    }
   ],
   "source": [
    "CRYPTO_VALUE = round(my_btc_value + my_eth_value, 2)\n",
    "print(f\"Total CRYPTO_VALUE = {CRYPTO_VALUE}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect Investments Data Using Alpaca: `SPY` (stocks) and `AGG` (bonds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Current amount of shares\n",
    "my_spy = 50\n",
    "my_agg = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set Alpaca API key and secret\n",
    "# YOUR CODE HERE!\n",
    "alpaca_api_key = os.getenv(\"ALPACA_API_KEY\")\n",
    "alpaca_secret_key = os.getenv(\"ALPACA_SECRET_KEY\")\n",
    "\n",
    "\n",
    "# Create the Alpaca API object\n",
    "# YOUR CODE HERE!\n",
    "api = tradeapi.REST(\n",
    "    alpaca_api_key,\n",
    "    alpaca_secret_key,\n",
    "    api_version = \"v2\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-21 00:00:00-05:00</th>\n",
       "      <td>117.22</td>\n",
       "      <td>117.2985</td>\n",
       "      <td>117.14</td>\n",
       "      <td>117.26</td>\n",
       "      <td>5801029</td>\n",
       "      <td>384.49</td>\n",
       "      <td>384.95</td>\n",
       "      <td>383.25</td>\n",
       "      <td>384.2</td>\n",
       "      <td>41800991</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        SPY  \\\n",
       "                             open      high     low   close   volume    open   \n",
       "time                                                                           \n",
       "2021-01-21 00:00:00-05:00  117.22  117.2985  117.14  117.26  5801029  384.49   \n",
       "\n",
       "                                                            \n",
       "                             high     low  close    volume  \n",
       "time                                                        \n",
       "2021-01-21 00:00:00-05:00  384.95  383.25  384.2  41800991  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Format current date as ISO format\n",
    "today = pd.Timestamp(\"2021-01-21\", tz=\"America/New_York\").isoformat()\n",
    "\n",
    "# Set the tickers\n",
    "tickers = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Set timeframe to '1D' for Alpaca API\n",
    "timeframe = \"1D\"\n",
    "\n",
    "# Get current closing prices for SPY and AGG\n",
    "df_portfolio = api.get_barset(\n",
    "    tickers,\n",
    "    timeframe,\n",
    "    start = today,\n",
    "    end = today\n",
    ").df\n",
    "\n",
    "# Preview DataFrame\n",
    "df_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current AGG closing price: $117.26\n",
      "Current SPY closing price: $384.2\n"
     ]
    }
   ],
   "source": [
    "# Pick AGG and SPY close prices\n",
    "agg_close_price = float(df_portfolio[\"AGG\"][\"close\"])\n",
    "spy_close_price = float(df_portfolio[\"SPY\"][\"close\"])\n",
    "\n",
    "# Print AGG and SPY close prices\n",
    "print(f\"Current AGG closing price: ${agg_close_price}\")\n",
    "print(f\"Current SPY closing price: ${spy_close_price}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The current value of your 50 SPY shares is $19210.00\n",
      "The current value of your 200 AGG shares is $23452.00\n"
     ]
    }
   ],
   "source": [
    "# Compute the current value of shares\n",
    "my_spy_value = my_spy * spy_close_price\n",
    "my_agg_value = my_agg * agg_close_price\n",
    "\n",
    "# Print current value of share\n",
    "print(f\"The current value of your {my_spy} SPY shares is ${my_spy_value:0.2f}\")\n",
    "print(f\"The current value of your {my_agg} AGG shares is ${my_agg_value:0.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total STOCKS_VALUE = 42662.0\n"
     ]
    }
   ],
   "source": [
    "STOCKS_VALUE = my_spy_value + my_agg_value\n",
    "print(f\"Total STOCKS_VALUE = {STOCKS_VALUE}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Savings Health Analysis"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Shares</th>\n",
       "      <td>42662.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crypto</th>\n",
       "      <td>43391.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          amount\n",
       "Shares  42662.00\n",
       "Crypto  43391.67"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set monthly household income\n",
    "monthly_income = 12000\n",
    "\n",
    "# Create savings DataFrame\n",
    "# Set current amount of shares data\n",
    "savings = {\n",
    "    \"amount\": [STOCKS_VALUE, CRYPTO_VALUE]\n",
    "}\n",
    "\n",
    "# Set the tickers\n",
    "tickers = [\"Shares\", \"Crypto\"]\n",
    "\n",
    "# Create the shares DataFrame\n",
    "df_savings = pd.DataFrame(savings, index=tickers)\n",
    "\n",
    "\n",
    "# Display savings DataFrame\n",
    "display(df_savings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot savings pie chart\n",
    "df_savings.plot.pie(y=\"amount\", title=\"Personal Savings Composition\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ideal emergency fund = $36000\n",
      "The total amount of savings = $86053.67\n",
      "CONGRATULATIOS!!! You have enough money in this fund!!!\n"
     ]
    }
   ],
   "source": [
    "# Set ideal emergency fund\n",
    "emergency_fund = monthly_income * 3\n",
    "print(f\"The ideal emergency fund = ${emergency_fund}\")\n",
    "\n",
    "# Calculate total amount of savings\n",
    "# YOUR CODE HERE!\n",
    "total_amount_of_savings = STOCKS_VALUE + CRYPTO_VALUE\n",
    "print(f\"The total amount of savings = ${total_amount_of_savings}\")\n",
    "\n",
    "under_goal = emergency_fund-total_amount_of_savings\n",
    "\n",
    "\n",
    "# Validate saving health\n",
    "if total_amount_of_savings > emergency_fund:\n",
    "    print(\"CONGRATULATIOS!!! You have enough money in this fund!!!\")\n",
    "elif total_amount_of_savings == emergency_fund:\n",
    "    print(\"CONGRATULATIOS for reaching this financial goal!\")\n",
    "else:\n",
    "    print(f\"By now you are {emergency_fund-total_amount_of_savings} away from reaching your goal\")\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The ideal emergency fund = $36,000.00 \n",
    "\n",
    "#### The total amount of savings = $86053.67\n",
    "\n",
    "#### CONGRATULATIOS!!! You have enough money in this fund!!!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2 - Retirement Planning\n",
    "\n",
    "### Monte Carlo Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set start and end dates of five years back from today.\n",
    "# Sample results may vary from the solution based on the time frame chosen\n",
    "start_date = pd.Timestamp('2016-01-21', tz='America/New_York').isoformat()\n",
    "end_date = pd.Timestamp('2021-01-21', tz='America/New_York').isoformat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"5\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926.0</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878.0</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189.0</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631.0</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148.0</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open     high       low   close     volume   \n",
       "time                                                                      \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926.0   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878.0   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189.0   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631.0   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148.0   \n",
       "\n",
       "                              SPY                                     \n",
       "                             open    high     low   close     volume  \n",
       "time                                                                  \n",
       "2016-01-21 00:00:00-05:00  186.21  188.87  184.64  186.68  154918462  \n",
       "2016-01-22 00:00:00-05:00  189.78  190.76  188.88  190.49  132418951  \n",
       "2016-01-25 00:00:00-05:00  189.93  190.15  187.41  187.66   99219694  \n",
       "2016-01-26 00:00:00-05:00  188.42  190.53  188.02  190.18  115312517  \n",
       "2016-01-27 00:00:00-05:00  189.58  191.56  187.06  188.12  157060622  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get 5 years' worth of historical data for SPY and AGG\n",
    "# Set the tickers\n",
    "tickers2 = [\"AGG\", \"SPY\"]\n",
    "\n",
    "# Set timeframe to '1D' for Alpaca API\n",
    "timeframe2 = \"1D\"\n",
    "\n",
    "df_stock_data = api.get_barset(\n",
    "    tickers2,\n",
    "    timeframe2,\n",
    "    start=start_date,\n",
    "    end=end_date\n",
    ").df\n",
    "\n",
    "# Display sample data\n",
    "df_stock_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_30y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.40,.60],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878.0</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189.0</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631.0</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148.0</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open     high       low   close     volume   \n",
       "time                                                                      \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926.0   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878.0   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189.0   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631.0   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148.0   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Printing the simulation input data\n",
    "Shares_portfolio_30y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.999327</td>\n",
       "      <td>0.995103</td>\n",
       "      <td>1.009962</td>\n",
       "      <td>0.989577</td>\n",
       "      <td>0.995986</td>\n",
       "      <td>1.010366</td>\n",
       "      <td>1.019865</td>\n",
       "      <td>0.981257</td>\n",
       "      <td>1.006212</td>\n",
       "      <td>1.007175</td>\n",
       "      <td>...</td>\n",
       "      <td>1.004098</td>\n",
       "      <td>1.006111</td>\n",
       "      <td>0.995065</td>\n",
       "      <td>0.999920</td>\n",
       "      <td>0.999190</td>\n",
       "      <td>0.996947</td>\n",
       "      <td>1.005493</td>\n",
       "      <td>1.009997</td>\n",
       "      <td>0.996156</td>\n",
       "      <td>1.006679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.992316</td>\n",
       "      <td>0.999069</td>\n",
       "      <td>1.006266</td>\n",
       "      <td>0.983483</td>\n",
       "      <td>0.995568</td>\n",
       "      <td>1.019332</td>\n",
       "      <td>1.017624</td>\n",
       "      <td>0.975238</td>\n",
       "      <td>1.007793</td>\n",
       "      <td>1.017577</td>\n",
       "      <td>...</td>\n",
       "      <td>1.003881</td>\n",
       "      <td>1.005037</td>\n",
       "      <td>0.982641</td>\n",
       "      <td>1.001179</td>\n",
       "      <td>1.006414</td>\n",
       "      <td>0.998192</td>\n",
       "      <td>1.003945</td>\n",
       "      <td>1.022874</td>\n",
       "      <td>1.002837</td>\n",
       "      <td>0.993634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.996114</td>\n",
       "      <td>1.000084</td>\n",
       "      <td>1.004725</td>\n",
       "      <td>0.979041</td>\n",
       "      <td>0.991404</td>\n",
       "      <td>1.019330</td>\n",
       "      <td>1.019313</td>\n",
       "      <td>0.976198</td>\n",
       "      <td>1.012277</td>\n",
       "      <td>1.015696</td>\n",
       "      <td>...</td>\n",
       "      <td>1.003237</td>\n",
       "      <td>1.008621</td>\n",
       "      <td>0.987571</td>\n",
       "      <td>1.007275</td>\n",
       "      <td>1.019194</td>\n",
       "      <td>0.999665</td>\n",
       "      <td>0.999978</td>\n",
       "      <td>1.008205</td>\n",
       "      <td>1.010180</td>\n",
       "      <td>1.000689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.000892</td>\n",
       "      <td>1.005816</td>\n",
       "      <td>1.011324</td>\n",
       "      <td>0.999809</td>\n",
       "      <td>1.003502</td>\n",
       "      <td>1.010941</td>\n",
       "      <td>1.020331</td>\n",
       "      <td>0.977736</td>\n",
       "      <td>1.008328</td>\n",
       "      <td>1.010579</td>\n",
       "      <td>...</td>\n",
       "      <td>1.006530</td>\n",
       "      <td>1.012709</td>\n",
       "      <td>0.978184</td>\n",
       "      <td>1.005110</td>\n",
       "      <td>1.026818</td>\n",
       "      <td>0.999119</td>\n",
       "      <td>1.004046</td>\n",
       "      <td>1.003756</td>\n",
       "      <td>1.012514</td>\n",
       "      <td>0.982994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>13.771630</td>\n",
       "      <td>33.336600</td>\n",
       "      <td>22.435620</td>\n",
       "      <td>18.344450</td>\n",
       "      <td>4.721434</td>\n",
       "      <td>10.001618</td>\n",
       "      <td>21.366926</td>\n",
       "      <td>11.833476</td>\n",
       "      <td>10.723859</td>\n",
       "      <td>8.828433</td>\n",
       "      <td>...</td>\n",
       "      <td>15.603372</td>\n",
       "      <td>6.689211</td>\n",
       "      <td>11.540086</td>\n",
       "      <td>13.524863</td>\n",
       "      <td>43.464559</td>\n",
       "      <td>12.754007</td>\n",
       "      <td>70.212495</td>\n",
       "      <td>18.761320</td>\n",
       "      <td>11.102273</td>\n",
       "      <td>16.751120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>13.947428</td>\n",
       "      <td>33.095022</td>\n",
       "      <td>22.431746</td>\n",
       "      <td>18.316606</td>\n",
       "      <td>4.700615</td>\n",
       "      <td>10.083104</td>\n",
       "      <td>21.213390</td>\n",
       "      <td>11.800267</td>\n",
       "      <td>10.781915</td>\n",
       "      <td>8.910023</td>\n",
       "      <td>...</td>\n",
       "      <td>15.699723</td>\n",
       "      <td>6.631006</td>\n",
       "      <td>11.680585</td>\n",
       "      <td>13.543171</td>\n",
       "      <td>43.594094</td>\n",
       "      <td>12.639036</td>\n",
       "      <td>69.861772</td>\n",
       "      <td>18.633022</td>\n",
       "      <td>11.103971</td>\n",
       "      <td>16.780819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>13.849904</td>\n",
       "      <td>32.704570</td>\n",
       "      <td>22.624162</td>\n",
       "      <td>18.185178</td>\n",
       "      <td>4.727680</td>\n",
       "      <td>10.199842</td>\n",
       "      <td>21.189542</td>\n",
       "      <td>11.763929</td>\n",
       "      <td>10.799418</td>\n",
       "      <td>8.893445</td>\n",
       "      <td>...</td>\n",
       "      <td>15.522076</td>\n",
       "      <td>6.653914</td>\n",
       "      <td>11.663429</td>\n",
       "      <td>13.490065</td>\n",
       "      <td>43.411436</td>\n",
       "      <td>12.661627</td>\n",
       "      <td>69.825465</td>\n",
       "      <td>18.668044</td>\n",
       "      <td>11.144478</td>\n",
       "      <td>16.829379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>13.857274</td>\n",
       "      <td>32.613447</td>\n",
       "      <td>22.775198</td>\n",
       "      <td>18.287296</td>\n",
       "      <td>4.724133</td>\n",
       "      <td>10.151232</td>\n",
       "      <td>21.201498</td>\n",
       "      <td>11.731311</td>\n",
       "      <td>10.976516</td>\n",
       "      <td>8.883063</td>\n",
       "      <td>...</td>\n",
       "      <td>15.424245</td>\n",
       "      <td>6.654369</td>\n",
       "      <td>11.624944</td>\n",
       "      <td>13.222326</td>\n",
       "      <td>43.325993</td>\n",
       "      <td>12.700068</td>\n",
       "      <td>70.064595</td>\n",
       "      <td>18.835884</td>\n",
       "      <td>11.260435</td>\n",
       "      <td>16.736079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7560</th>\n",
       "      <td>13.883203</td>\n",
       "      <td>32.429921</td>\n",
       "      <td>22.919861</td>\n",
       "      <td>18.299749</td>\n",
       "      <td>4.672426</td>\n",
       "      <td>10.190856</td>\n",
       "      <td>21.236982</td>\n",
       "      <td>11.641148</td>\n",
       "      <td>11.047319</td>\n",
       "      <td>8.795340</td>\n",
       "      <td>...</td>\n",
       "      <td>15.510514</td>\n",
       "      <td>6.696472</td>\n",
       "      <td>11.651360</td>\n",
       "      <td>13.289162</td>\n",
       "      <td>43.156922</td>\n",
       "      <td>12.608334</td>\n",
       "      <td>70.217597</td>\n",
       "      <td>19.002616</td>\n",
       "      <td>11.302930</td>\n",
       "      <td>16.864802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7561 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0          1          2          3         4          5    \\\n",
       "0      1.000000   1.000000   1.000000   1.000000  1.000000   1.000000   \n",
       "1      0.999327   0.995103   1.009962   0.989577  0.995986   1.010366   \n",
       "2      0.992316   0.999069   1.006266   0.983483  0.995568   1.019332   \n",
       "3      0.996114   1.000084   1.004725   0.979041  0.991404   1.019330   \n",
       "4      1.000892   1.005816   1.011324   0.999809  1.003502   1.010941   \n",
       "...         ...        ...        ...        ...       ...        ...   \n",
       "7556  13.771630  33.336600  22.435620  18.344450  4.721434  10.001618   \n",
       "7557  13.947428  33.095022  22.431746  18.316606  4.700615  10.083104   \n",
       "7558  13.849904  32.704570  22.624162  18.185178  4.727680  10.199842   \n",
       "7559  13.857274  32.613447  22.775198  18.287296  4.724133  10.151232   \n",
       "7560  13.883203  32.429921  22.919861  18.299749  4.672426  10.190856   \n",
       "\n",
       "            6          7          8         9    ...        490       491  \\\n",
       "0      1.000000   1.000000   1.000000  1.000000  ...   1.000000  1.000000   \n",
       "1      1.019865   0.981257   1.006212  1.007175  ...   1.004098  1.006111   \n",
       "2      1.017624   0.975238   1.007793  1.017577  ...   1.003881  1.005037   \n",
       "3      1.019313   0.976198   1.012277  1.015696  ...   1.003237  1.008621   \n",
       "4      1.020331   0.977736   1.008328  1.010579  ...   1.006530  1.012709   \n",
       "...         ...        ...        ...       ...  ...        ...       ...   \n",
       "7556  21.366926  11.833476  10.723859  8.828433  ...  15.603372  6.689211   \n",
       "7557  21.213390  11.800267  10.781915  8.910023  ...  15.699723  6.631006   \n",
       "7558  21.189542  11.763929  10.799418  8.893445  ...  15.522076  6.653914   \n",
       "7559  21.201498  11.731311  10.976516  8.883063  ...  15.424245  6.654369   \n",
       "7560  21.236982  11.641148  11.047319  8.795340  ...  15.510514  6.696472   \n",
       "\n",
       "            492        493        494        495        496        497  \\\n",
       "0      1.000000   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "1      0.995065   0.999920   0.999190   0.996947   1.005493   1.009997   \n",
       "2      0.982641   1.001179   1.006414   0.998192   1.003945   1.022874   \n",
       "3      0.987571   1.007275   1.019194   0.999665   0.999978   1.008205   \n",
       "4      0.978184   1.005110   1.026818   0.999119   1.004046   1.003756   \n",
       "...         ...        ...        ...        ...        ...        ...   \n",
       "7556  11.540086  13.524863  43.464559  12.754007  70.212495  18.761320   \n",
       "7557  11.680585  13.543171  43.594094  12.639036  69.861772  18.633022   \n",
       "7558  11.663429  13.490065  43.411436  12.661627  69.825465  18.668044   \n",
       "7559  11.624944  13.222326  43.325993  12.700068  70.064595  18.835884   \n",
       "7560  11.651360  13.289162  43.156922  12.608334  70.217597  19.002616   \n",
       "\n",
       "            498        499  \n",
       "0      1.000000   1.000000  \n",
       "1      0.996156   1.006679  \n",
       "2      1.002837   0.993634  \n",
       "3      1.010180   1.000689  \n",
       "4      1.012514   0.982994  \n",
       "...         ...        ...  \n",
       "7556  11.102273  16.751120  \n",
       "7557  11.103971  16.780819  \n",
       "7558  11.144478  16.829379  \n",
       "7559  11.260435  16.736079  \n",
       "7560  11.302930  16.864802  \n",
       "\n",
       "[7561 rows x 500 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 30 years cumulative returns\n",
    "Shares_portfolio_30y.calc_cumulative_return()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "line_plot = Shares_portfolio_30y.plot_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot = Shares_portfolio_30y.plot_distribution()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retirement Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean             23.050323\n",
      "std              16.838745\n",
      "min               3.708206\n",
      "25%              12.221018\n",
      "50%              19.757999\n",
      "75%              27.904071\n",
      "max             117.708372\n",
      "95% CI Lower      5.663739\n",
      "95% CI Upper     78.263626\n",
      "Name: 7560, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_30y_tbl = Shares_portfolio_30y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_30y_tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the 95% lower and upper confidence intervals based on a `$20,000` initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $20000 in the portfolio over the next 30 years will end within in the range of $113274.77 and $1565272.52\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $20,000\n",
    "Shares_portfolio_30y_tbl_lower = round(Shares_portfolio_30y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_30y_tbl_upper = round(Shares_portfolio_30y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_30y_tbl_lower} and ${Shares_portfolio_30y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 20000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $113274.77\n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $1565272.52"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the expected portfolio return at the `95%` lower and upper confidence intervals based on a `50%` increase in the initial investment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $30000.0 in the portfolio over the next 30 years will end within in the range of $169912.16 and $2347908.78\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 1.5\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $30,000\n",
    "Shares_portfolio_30y_tbl_lower2 = round(Shares_portfolio_30y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_30y_tbl_upper2 = round(Shares_portfolio_30y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 30 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_30y_tbl_lower2} and ${Shares_portfolio_30y_tbl_upper2}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 30000\n",
    "\n",
    "** Shares_portfolio_30y_tbl_lower = $169912.16\n",
    "\n",
    "** Shares_portfolio_30y_tbl_upper = $2347908.78"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Challenge - Early Retirement\n",
    "\n",
    "\n",
    "### Five Years Retirement Option"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 5 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_5y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.20,.80],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878.0</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189.0</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631.0</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148.0</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open     high       low   close     volume   \n",
       "time                                                                      \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926.0   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878.0   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189.0   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631.0   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148.0   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 5 years cumulative returns\n",
    "Shares_portfolio_5y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.005945</td>\n",
       "      <td>0.993324</td>\n",
       "      <td>0.995234</td>\n",
       "      <td>0.994449</td>\n",
       "      <td>1.005789</td>\n",
       "      <td>1.006281</td>\n",
       "      <td>1.022851</td>\n",
       "      <td>1.011671</td>\n",
       "      <td>1.006021</td>\n",
       "      <td>1.001249</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999854</td>\n",
       "      <td>0.999145</td>\n",
       "      <td>0.996799</td>\n",
       "      <td>0.997008</td>\n",
       "      <td>0.987453</td>\n",
       "      <td>0.997855</td>\n",
       "      <td>0.986601</td>\n",
       "      <td>0.991694</td>\n",
       "      <td>1.020785</td>\n",
       "      <td>1.006025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.017433</td>\n",
       "      <td>1.001234</td>\n",
       "      <td>1.010531</td>\n",
       "      <td>0.992076</td>\n",
       "      <td>1.003546</td>\n",
       "      <td>0.999532</td>\n",
       "      <td>1.017704</td>\n",
       "      <td>1.001710</td>\n",
       "      <td>1.025097</td>\n",
       "      <td>1.014258</td>\n",
       "      <td>...</td>\n",
       "      <td>1.005416</td>\n",
       "      <td>0.996605</td>\n",
       "      <td>1.005312</td>\n",
       "      <td>1.011016</td>\n",
       "      <td>1.003972</td>\n",
       "      <td>1.007822</td>\n",
       "      <td>0.995060</td>\n",
       "      <td>0.970635</td>\n",
       "      <td>1.010377</td>\n",
       "      <td>1.008834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.013553</td>\n",
       "      <td>1.014056</td>\n",
       "      <td>1.033978</td>\n",
       "      <td>0.977215</td>\n",
       "      <td>1.004481</td>\n",
       "      <td>0.996028</td>\n",
       "      <td>1.034198</td>\n",
       "      <td>1.020372</td>\n",
       "      <td>1.001699</td>\n",
       "      <td>1.027667</td>\n",
       "      <td>...</td>\n",
       "      <td>1.012853</td>\n",
       "      <td>0.993590</td>\n",
       "      <td>1.012748</td>\n",
       "      <td>1.007611</td>\n",
       "      <td>1.020737</td>\n",
       "      <td>1.012166</td>\n",
       "      <td>0.990823</td>\n",
       "      <td>0.955679</td>\n",
       "      <td>1.003818</td>\n",
       "      <td>1.011339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.006661</td>\n",
       "      <td>1.004995</td>\n",
       "      <td>1.035565</td>\n",
       "      <td>0.966431</td>\n",
       "      <td>1.001126</td>\n",
       "      <td>0.992104</td>\n",
       "      <td>1.038725</td>\n",
       "      <td>1.031534</td>\n",
       "      <td>1.011295</td>\n",
       "      <td>1.024907</td>\n",
       "      <td>...</td>\n",
       "      <td>1.015717</td>\n",
       "      <td>0.991133</td>\n",
       "      <td>1.017182</td>\n",
       "      <td>1.021685</td>\n",
       "      <td>1.043733</td>\n",
       "      <td>1.020408</td>\n",
       "      <td>0.986558</td>\n",
       "      <td>0.967030</td>\n",
       "      <td>1.021512</td>\n",
       "      <td>0.995813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1256</th>\n",
       "      <td>1.910237</td>\n",
       "      <td>1.899875</td>\n",
       "      <td>1.832511</td>\n",
       "      <td>2.179125</td>\n",
       "      <td>1.591340</td>\n",
       "      <td>0.747720</td>\n",
       "      <td>1.498534</td>\n",
       "      <td>2.980014</td>\n",
       "      <td>1.713492</td>\n",
       "      <td>1.810503</td>\n",
       "      <td>...</td>\n",
       "      <td>0.940420</td>\n",
       "      <td>1.209295</td>\n",
       "      <td>3.224865</td>\n",
       "      <td>2.341534</td>\n",
       "      <td>1.835377</td>\n",
       "      <td>2.129104</td>\n",
       "      <td>1.635914</td>\n",
       "      <td>1.217378</td>\n",
       "      <td>2.422288</td>\n",
       "      <td>2.056120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1257</th>\n",
       "      <td>1.912603</td>\n",
       "      <td>1.874542</td>\n",
       "      <td>1.834961</td>\n",
       "      <td>2.178160</td>\n",
       "      <td>1.585444</td>\n",
       "      <td>0.756092</td>\n",
       "      <td>1.500858</td>\n",
       "      <td>2.997048</td>\n",
       "      <td>1.751652</td>\n",
       "      <td>1.821585</td>\n",
       "      <td>...</td>\n",
       "      <td>0.933877</td>\n",
       "      <td>1.210897</td>\n",
       "      <td>3.214366</td>\n",
       "      <td>2.356820</td>\n",
       "      <td>1.802187</td>\n",
       "      <td>2.121293</td>\n",
       "      <td>1.624686</td>\n",
       "      <td>1.223241</td>\n",
       "      <td>2.420801</td>\n",
       "      <td>2.082590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>1.914181</td>\n",
       "      <td>1.892425</td>\n",
       "      <td>1.839725</td>\n",
       "      <td>2.181860</td>\n",
       "      <td>1.595067</td>\n",
       "      <td>0.763493</td>\n",
       "      <td>1.470419</td>\n",
       "      <td>2.964312</td>\n",
       "      <td>1.782659</td>\n",
       "      <td>1.828948</td>\n",
       "      <td>...</td>\n",
       "      <td>0.922502</td>\n",
       "      <td>1.212017</td>\n",
       "      <td>3.237113</td>\n",
       "      <td>2.334901</td>\n",
       "      <td>1.808832</td>\n",
       "      <td>2.131391</td>\n",
       "      <td>1.601900</td>\n",
       "      <td>1.220891</td>\n",
       "      <td>2.436638</td>\n",
       "      <td>2.060769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1259</th>\n",
       "      <td>1.909377</td>\n",
       "      <td>1.903381</td>\n",
       "      <td>1.855094</td>\n",
       "      <td>2.160330</td>\n",
       "      <td>1.590741</td>\n",
       "      <td>0.764085</td>\n",
       "      <td>1.445858</td>\n",
       "      <td>2.987651</td>\n",
       "      <td>1.764571</td>\n",
       "      <td>1.788277</td>\n",
       "      <td>...</td>\n",
       "      <td>0.928303</td>\n",
       "      <td>1.208169</td>\n",
       "      <td>3.243572</td>\n",
       "      <td>2.340806</td>\n",
       "      <td>1.806028</td>\n",
       "      <td>2.137352</td>\n",
       "      <td>1.620032</td>\n",
       "      <td>1.222332</td>\n",
       "      <td>2.461008</td>\n",
       "      <td>2.050417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1260</th>\n",
       "      <td>1.883603</td>\n",
       "      <td>1.893970</td>\n",
       "      <td>1.869928</td>\n",
       "      <td>2.127010</td>\n",
       "      <td>1.583569</td>\n",
       "      <td>0.770160</td>\n",
       "      <td>1.444112</td>\n",
       "      <td>2.989593</td>\n",
       "      <td>1.736833</td>\n",
       "      <td>1.795221</td>\n",
       "      <td>...</td>\n",
       "      <td>0.929810</td>\n",
       "      <td>1.220063</td>\n",
       "      <td>3.243631</td>\n",
       "      <td>2.345869</td>\n",
       "      <td>1.794925</td>\n",
       "      <td>2.122233</td>\n",
       "      <td>1.631512</td>\n",
       "      <td>1.229518</td>\n",
       "      <td>2.465748</td>\n",
       "      <td>2.055174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1261 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6    \\\n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
       "1     1.005945  0.993324  0.995234  0.994449  1.005789  1.006281  1.022851   \n",
       "2     1.017433  1.001234  1.010531  0.992076  1.003546  0.999532  1.017704   \n",
       "3     1.013553  1.014056  1.033978  0.977215  1.004481  0.996028  1.034198   \n",
       "4     1.006661  1.004995  1.035565  0.966431  1.001126  0.992104  1.038725   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "1256  1.910237  1.899875  1.832511  2.179125  1.591340  0.747720  1.498534   \n",
       "1257  1.912603  1.874542  1.834961  2.178160  1.585444  0.756092  1.500858   \n",
       "1258  1.914181  1.892425  1.839725  2.181860  1.595067  0.763493  1.470419   \n",
       "1259  1.909377  1.903381  1.855094  2.160330  1.590741  0.764085  1.445858   \n",
       "1260  1.883603  1.893970  1.869928  2.127010  1.583569  0.770160  1.444112   \n",
       "\n",
       "           7         8         9    ...       490       491       492  \\\n",
       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
       "1     1.011671  1.006021  1.001249  ...  0.999854  0.999145  0.996799   \n",
       "2     1.001710  1.025097  1.014258  ...  1.005416  0.996605  1.005312   \n",
       "3     1.020372  1.001699  1.027667  ...  1.012853  0.993590  1.012748   \n",
       "4     1.031534  1.011295  1.024907  ...  1.015717  0.991133  1.017182   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "1256  2.980014  1.713492  1.810503  ...  0.940420  1.209295  3.224865   \n",
       "1257  2.997048  1.751652  1.821585  ...  0.933877  1.210897  3.214366   \n",
       "1258  2.964312  1.782659  1.828948  ...  0.922502  1.212017  3.237113   \n",
       "1259  2.987651  1.764571  1.788277  ...  0.928303  1.208169  3.243572   \n",
       "1260  2.989593  1.736833  1.795221  ...  0.929810  1.220063  3.243631   \n",
       "\n",
       "           493       494       495       496       497       498       499  \n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
       "1     0.997008  0.987453  0.997855  0.986601  0.991694  1.020785  1.006025  \n",
       "2     1.011016  1.003972  1.007822  0.995060  0.970635  1.010377  1.008834  \n",
       "3     1.007611  1.020737  1.012166  0.990823  0.955679  1.003818  1.011339  \n",
       "4     1.021685  1.043733  1.020408  0.986558  0.967030  1.021512  0.995813  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "1256  2.341534  1.835377  2.129104  1.635914  1.217378  2.422288  2.056120  \n",
       "1257  2.356820  1.802187  2.121293  1.624686  1.223241  2.420801  2.082590  \n",
       "1258  2.334901  1.808832  2.131391  1.601900  1.220891  2.436638  2.060769  \n",
       "1259  2.340806  1.806028  2.137352  1.620032  1.222332  2.461008  2.050417  \n",
       "1260  2.345869  1.794925  2.122233  1.631512  1.229518  2.465748  2.055174  \n",
       "\n",
       "[1261 rows x 500 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "Shares_portfolio_5y.calc_cumulative_return() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot_5y = Shares_portfolio_5y.plot_distribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean              1.933377\n",
      "std               0.695601\n",
      "min               0.559032\n",
      "25%               1.429931\n",
      "50%               1.848629\n",
      "75%               2.272932\n",
      "max               5.002758\n",
      "95% CI Lower      0.943084\n",
      "95% CI Upper      3.629751\n",
      "Name: 1260, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_5y_tbl = Shares_portfolio_5y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_5y_tbl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $60000 in the portfolio over the next 5 years will end within in the range of $56585.05 and $217785.05\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 3\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $60,000\n",
    "Shares_portfolio_5y_tbl_lower = round(Shares_portfolio_5y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_5y_tbl_upper = round(Shares_portfolio_5y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 5 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_5y_tbl_lower} and ${Shares_portfolio_5y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 60000\n",
    "\n",
    "** Shares_portfolio_5y_tbl_lower = $56585.05\n",
    "\n",
    "** Shares_portfolio_5y_tbl_upper = $217785.05"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ten Years Retirement Option"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuring a Monte Carlo simulation to forecast 10 years cumulative returns\n",
    "num_sims = 500\n",
    "\n",
    "Shares_portfolio_10y = MCSimulation(\n",
    "    portfolio_data = df_stock_data,\n",
    "    weights = [.20,.80],\n",
    "    num_simulation = num_sims,\n",
    "    num_trading_days = 252*10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"6\" halign=\"left\">AGG</th>\n",
       "      <th colspan=\"6\" halign=\"left\">SPY</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>daily_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-21 00:00:00-05:00</th>\n",
       "      <td>109.08</td>\n",
       "      <td>109.080</td>\n",
       "      <td>108.7400</td>\n",
       "      <td>108.78</td>\n",
       "      <td>6927926.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>186.21</td>\n",
       "      <td>188.87</td>\n",
       "      <td>184.64</td>\n",
       "      <td>186.68</td>\n",
       "      <td>154918462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-22 00:00:00-05:00</th>\n",
       "      <td>108.72</td>\n",
       "      <td>108.850</td>\n",
       "      <td>108.5850</td>\n",
       "      <td>108.82</td>\n",
       "      <td>2980878.0</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>189.78</td>\n",
       "      <td>190.76</td>\n",
       "      <td>188.88</td>\n",
       "      <td>190.49</td>\n",
       "      <td>132418951</td>\n",
       "      <td>0.020409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-25 00:00:00-05:00</th>\n",
       "      <td>108.95</td>\n",
       "      <td>108.980</td>\n",
       "      <td>108.7700</td>\n",
       "      <td>108.79</td>\n",
       "      <td>3120189.0</td>\n",
       "      <td>-0.000276</td>\n",
       "      <td>189.93</td>\n",
       "      <td>190.15</td>\n",
       "      <td>187.41</td>\n",
       "      <td>187.66</td>\n",
       "      <td>99219694</td>\n",
       "      <td>-0.014856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-26 00:00:00-05:00</th>\n",
       "      <td>108.90</td>\n",
       "      <td>108.995</td>\n",
       "      <td>108.7699</td>\n",
       "      <td>108.90</td>\n",
       "      <td>2023631.0</td>\n",
       "      <td>0.001011</td>\n",
       "      <td>188.42</td>\n",
       "      <td>190.53</td>\n",
       "      <td>188.02</td>\n",
       "      <td>190.18</td>\n",
       "      <td>115312517</td>\n",
       "      <td>0.013429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-27 00:00:00-05:00</th>\n",
       "      <td>108.91</td>\n",
       "      <td>109.010</td>\n",
       "      <td>108.7200</td>\n",
       "      <td>108.95</td>\n",
       "      <td>1531148.0</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>189.58</td>\n",
       "      <td>191.56</td>\n",
       "      <td>187.06</td>\n",
       "      <td>188.12</td>\n",
       "      <td>157060622</td>\n",
       "      <td>-0.010832</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              AGG                                        \\\n",
       "                             open     high       low   close     volume   \n",
       "time                                                                      \n",
       "2016-01-21 00:00:00-05:00  109.08  109.080  108.7400  108.78  6927926.0   \n",
       "2016-01-22 00:00:00-05:00  108.72  108.850  108.5850  108.82  2980878.0   \n",
       "2016-01-25 00:00:00-05:00  108.95  108.980  108.7700  108.79  3120189.0   \n",
       "2016-01-26 00:00:00-05:00  108.90  108.995  108.7699  108.90  2023631.0   \n",
       "2016-01-27 00:00:00-05:00  108.91  109.010  108.7200  108.95  1531148.0   \n",
       "\n",
       "                                           SPY                          \\\n",
       "                          daily_return    open    high     low   close   \n",
       "time                                                                     \n",
       "2016-01-21 00:00:00-05:00          NaN  186.21  188.87  184.64  186.68   \n",
       "2016-01-22 00:00:00-05:00     0.000368  189.78  190.76  188.88  190.49   \n",
       "2016-01-25 00:00:00-05:00    -0.000276  189.93  190.15  187.41  187.66   \n",
       "2016-01-26 00:00:00-05:00     0.001011  188.42  190.53  188.02  190.18   \n",
       "2016-01-27 00:00:00-05:00     0.000459  189.58  191.56  187.06  188.12   \n",
       "\n",
       "                                                   \n",
       "                              volume daily_return  \n",
       "time                                               \n",
       "2016-01-21 00:00:00-05:00  154918462          NaN  \n",
       "2016-01-22 00:00:00-05:00  132418951     0.020409  \n",
       "2016-01-25 00:00:00-05:00   99219694    -0.014856  \n",
       "2016-01-26 00:00:00-05:00  115312517     0.013429  \n",
       "2016-01-27 00:00:00-05:00  157060622    -0.010832  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Running a Monte Carlo simulation to forecast 10 years cumulative returns\n",
    "Shares_portfolio_10y.portfolio_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running Monte Carlo simulation number 0.\n",
      "Running Monte Carlo simulation number 10.\n",
      "Running Monte Carlo simulation number 20.\n",
      "Running Monte Carlo simulation number 30.\n",
      "Running Monte Carlo simulation number 40.\n",
      "Running Monte Carlo simulation number 50.\n",
      "Running Monte Carlo simulation number 60.\n",
      "Running Monte Carlo simulation number 70.\n",
      "Running Monte Carlo simulation number 80.\n",
      "Running Monte Carlo simulation number 90.\n",
      "Running Monte Carlo simulation number 100.\n",
      "Running Monte Carlo simulation number 110.\n",
      "Running Monte Carlo simulation number 120.\n",
      "Running Monte Carlo simulation number 130.\n",
      "Running Monte Carlo simulation number 140.\n",
      "Running Monte Carlo simulation number 150.\n",
      "Running Monte Carlo simulation number 160.\n",
      "Running Monte Carlo simulation number 170.\n",
      "Running Monte Carlo simulation number 180.\n",
      "Running Monte Carlo simulation number 190.\n",
      "Running Monte Carlo simulation number 200.\n",
      "Running Monte Carlo simulation number 210.\n",
      "Running Monte Carlo simulation number 220.\n",
      "Running Monte Carlo simulation number 230.\n",
      "Running Monte Carlo simulation number 240.\n",
      "Running Monte Carlo simulation number 250.\n",
      "Running Monte Carlo simulation number 260.\n",
      "Running Monte Carlo simulation number 270.\n",
      "Running Monte Carlo simulation number 280.\n",
      "Running Monte Carlo simulation number 290.\n",
      "Running Monte Carlo simulation number 300.\n",
      "Running Monte Carlo simulation number 310.\n",
      "Running Monte Carlo simulation number 320.\n",
      "Running Monte Carlo simulation number 330.\n",
      "Running Monte Carlo simulation number 340.\n",
      "Running Monte Carlo simulation number 350.\n",
      "Running Monte Carlo simulation number 360.\n",
      "Running Monte Carlo simulation number 370.\n",
      "Running Monte Carlo simulation number 380.\n",
      "Running Monte Carlo simulation number 390.\n",
      "Running Monte Carlo simulation number 400.\n",
      "Running Monte Carlo simulation number 410.\n",
      "Running Monte Carlo simulation number 420.\n",
      "Running Monte Carlo simulation number 430.\n",
      "Running Monte Carlo simulation number 440.\n",
      "Running Monte Carlo simulation number 450.\n",
      "Running Monte Carlo simulation number 460.\n",
      "Running Monte Carlo simulation number 470.\n",
      "Running Monte Carlo simulation number 480.\n",
      "Running Monte Carlo simulation number 490.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.988841</td>\n",
       "      <td>1.001276</td>\n",
       "      <td>0.998626</td>\n",
       "      <td>1.005204</td>\n",
       "      <td>0.999911</td>\n",
       "      <td>0.995022</td>\n",
       "      <td>1.000205</td>\n",
       "      <td>1.023966</td>\n",
       "      <td>0.982504</td>\n",
       "      <td>0.990030</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999827</td>\n",
       "      <td>1.009498</td>\n",
       "      <td>0.988733</td>\n",
       "      <td>1.004735</td>\n",
       "      <td>0.991096</td>\n",
       "      <td>1.009417</td>\n",
       "      <td>1.012399</td>\n",
       "      <td>1.003542</td>\n",
       "      <td>0.985128</td>\n",
       "      <td>0.986669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.976524</td>\n",
       "      <td>1.014230</td>\n",
       "      <td>1.004347</td>\n",
       "      <td>1.005210</td>\n",
       "      <td>1.006677</td>\n",
       "      <td>1.012710</td>\n",
       "      <td>1.003848</td>\n",
       "      <td>1.025806</td>\n",
       "      <td>0.987836</td>\n",
       "      <td>0.988066</td>\n",
       "      <td>...</td>\n",
       "      <td>1.011397</td>\n",
       "      <td>1.009538</td>\n",
       "      <td>1.002155</td>\n",
       "      <td>1.010887</td>\n",
       "      <td>0.994859</td>\n",
       "      <td>1.003047</td>\n",
       "      <td>1.011038</td>\n",
       "      <td>1.007845</td>\n",
       "      <td>0.984214</td>\n",
       "      <td>0.980678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.970723</td>\n",
       "      <td>1.024312</td>\n",
       "      <td>1.010014</td>\n",
       "      <td>1.016947</td>\n",
       "      <td>1.003695</td>\n",
       "      <td>1.021547</td>\n",
       "      <td>0.996790</td>\n",
       "      <td>1.019266</td>\n",
       "      <td>0.992873</td>\n",
       "      <td>0.991670</td>\n",
       "      <td>...</td>\n",
       "      <td>1.011580</td>\n",
       "      <td>1.024829</td>\n",
       "      <td>1.004084</td>\n",
       "      <td>1.023029</td>\n",
       "      <td>1.000373</td>\n",
       "      <td>1.007144</td>\n",
       "      <td>1.009826</td>\n",
       "      <td>0.998939</td>\n",
       "      <td>0.992846</td>\n",
       "      <td>0.983801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.981819</td>\n",
       "      <td>1.034615</td>\n",
       "      <td>0.998143</td>\n",
       "      <td>1.005652</td>\n",
       "      <td>1.011661</td>\n",
       "      <td>1.006431</td>\n",
       "      <td>0.998603</td>\n",
       "      <td>1.023437</td>\n",
       "      <td>1.020434</td>\n",
       "      <td>0.990868</td>\n",
       "      <td>...</td>\n",
       "      <td>1.024329</td>\n",
       "      <td>1.035858</td>\n",
       "      <td>1.016048</td>\n",
       "      <td>1.025817</td>\n",
       "      <td>0.995188</td>\n",
       "      <td>1.017619</td>\n",
       "      <td>1.004804</td>\n",
       "      <td>0.996951</td>\n",
       "      <td>0.986433</td>\n",
       "      <td>0.987500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2516</th>\n",
       "      <td>1.611879</td>\n",
       "      <td>2.919695</td>\n",
       "      <td>3.352102</td>\n",
       "      <td>1.839835</td>\n",
       "      <td>2.937391</td>\n",
       "      <td>3.299081</td>\n",
       "      <td>5.833717</td>\n",
       "      <td>3.538116</td>\n",
       "      <td>6.752512</td>\n",
       "      <td>8.620935</td>\n",
       "      <td>...</td>\n",
       "      <td>3.804508</td>\n",
       "      <td>6.409320</td>\n",
       "      <td>5.810038</td>\n",
       "      <td>4.878575</td>\n",
       "      <td>2.476513</td>\n",
       "      <td>2.356759</td>\n",
       "      <td>3.095399</td>\n",
       "      <td>4.256486</td>\n",
       "      <td>1.616909</td>\n",
       "      <td>10.189724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2517</th>\n",
       "      <td>1.629509</td>\n",
       "      <td>2.939851</td>\n",
       "      <td>3.388170</td>\n",
       "      <td>1.847087</td>\n",
       "      <td>2.961633</td>\n",
       "      <td>3.324201</td>\n",
       "      <td>5.819543</td>\n",
       "      <td>3.484839</td>\n",
       "      <td>6.786408</td>\n",
       "      <td>8.458979</td>\n",
       "      <td>...</td>\n",
       "      <td>3.768201</td>\n",
       "      <td>6.341104</td>\n",
       "      <td>5.843858</td>\n",
       "      <td>4.850176</td>\n",
       "      <td>2.433555</td>\n",
       "      <td>2.359534</td>\n",
       "      <td>3.044303</td>\n",
       "      <td>4.288539</td>\n",
       "      <td>1.630304</td>\n",
       "      <td>10.255937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2518</th>\n",
       "      <td>1.636320</td>\n",
       "      <td>2.947679</td>\n",
       "      <td>3.374714</td>\n",
       "      <td>1.835194</td>\n",
       "      <td>2.940108</td>\n",
       "      <td>3.362621</td>\n",
       "      <td>5.786604</td>\n",
       "      <td>3.451250</td>\n",
       "      <td>6.857919</td>\n",
       "      <td>8.317835</td>\n",
       "      <td>...</td>\n",
       "      <td>3.821630</td>\n",
       "      <td>6.475776</td>\n",
       "      <td>5.843998</td>\n",
       "      <td>4.840090</td>\n",
       "      <td>2.434410</td>\n",
       "      <td>2.306685</td>\n",
       "      <td>3.016106</td>\n",
       "      <td>4.304671</td>\n",
       "      <td>1.642819</td>\n",
       "      <td>10.091235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2519</th>\n",
       "      <td>1.631222</td>\n",
       "      <td>2.945384</td>\n",
       "      <td>3.368219</td>\n",
       "      <td>1.832737</td>\n",
       "      <td>2.922298</td>\n",
       "      <td>3.369758</td>\n",
       "      <td>5.809582</td>\n",
       "      <td>3.503004</td>\n",
       "      <td>6.841671</td>\n",
       "      <td>8.401992</td>\n",
       "      <td>...</td>\n",
       "      <td>3.817701</td>\n",
       "      <td>6.426137</td>\n",
       "      <td>5.954074</td>\n",
       "      <td>4.867259</td>\n",
       "      <td>2.467998</td>\n",
       "      <td>2.333545</td>\n",
       "      <td>3.086759</td>\n",
       "      <td>4.328930</td>\n",
       "      <td>1.640265</td>\n",
       "      <td>10.099412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>1.627148</td>\n",
       "      <td>2.953995</td>\n",
       "      <td>3.355443</td>\n",
       "      <td>1.812324</td>\n",
       "      <td>2.953370</td>\n",
       "      <td>3.366486</td>\n",
       "      <td>5.742819</td>\n",
       "      <td>3.472403</td>\n",
       "      <td>6.831416</td>\n",
       "      <td>8.386713</td>\n",
       "      <td>...</td>\n",
       "      <td>3.806096</td>\n",
       "      <td>6.439968</td>\n",
       "      <td>5.904627</td>\n",
       "      <td>4.786068</td>\n",
       "      <td>2.494452</td>\n",
       "      <td>2.345048</td>\n",
       "      <td>3.123214</td>\n",
       "      <td>4.323003</td>\n",
       "      <td>1.674360</td>\n",
       "      <td>9.965621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2521 rows × 500 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6    \\\n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
       "1     0.988841  1.001276  0.998626  1.005204  0.999911  0.995022  1.000205   \n",
       "2     0.976524  1.014230  1.004347  1.005210  1.006677  1.012710  1.003848   \n",
       "3     0.970723  1.024312  1.010014  1.016947  1.003695  1.021547  0.996790   \n",
       "4     0.981819  1.034615  0.998143  1.005652  1.011661  1.006431  0.998603   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "2516  1.611879  2.919695  3.352102  1.839835  2.937391  3.299081  5.833717   \n",
       "2517  1.629509  2.939851  3.388170  1.847087  2.961633  3.324201  5.819543   \n",
       "2518  1.636320  2.947679  3.374714  1.835194  2.940108  3.362621  5.786604   \n",
       "2519  1.631222  2.945384  3.368219  1.832737  2.922298  3.369758  5.809582   \n",
       "2520  1.627148  2.953995  3.355443  1.812324  2.953370  3.366486  5.742819   \n",
       "\n",
       "           7         8         9    ...       490       491       492  \\\n",
       "0     1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
       "1     1.023966  0.982504  0.990030  ...  0.999827  1.009498  0.988733   \n",
       "2     1.025806  0.987836  0.988066  ...  1.011397  1.009538  1.002155   \n",
       "3     1.019266  0.992873  0.991670  ...  1.011580  1.024829  1.004084   \n",
       "4     1.023437  1.020434  0.990868  ...  1.024329  1.035858  1.016048   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "2516  3.538116  6.752512  8.620935  ...  3.804508  6.409320  5.810038   \n",
       "2517  3.484839  6.786408  8.458979  ...  3.768201  6.341104  5.843858   \n",
       "2518  3.451250  6.857919  8.317835  ...  3.821630  6.475776  5.843998   \n",
       "2519  3.503004  6.841671  8.401992  ...  3.817701  6.426137  5.954074   \n",
       "2520  3.472403  6.831416  8.386713  ...  3.806096  6.439968  5.904627   \n",
       "\n",
       "           493       494       495       496       497       498        499  \n",
       "0     1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   1.000000  \n",
       "1     1.004735  0.991096  1.009417  1.012399  1.003542  0.985128   0.986669  \n",
       "2     1.010887  0.994859  1.003047  1.011038  1.007845  0.984214   0.980678  \n",
       "3     1.023029  1.000373  1.007144  1.009826  0.998939  0.992846   0.983801  \n",
       "4     1.025817  0.995188  1.017619  1.004804  0.996951  0.986433   0.987500  \n",
       "...        ...       ...       ...       ...       ...       ...        ...  \n",
       "2516  4.878575  2.476513  2.356759  3.095399  4.256486  1.616909  10.189724  \n",
       "2517  4.850176  2.433555  2.359534  3.044303  4.288539  1.630304  10.255937  \n",
       "2518  4.840090  2.434410  2.306685  3.016106  4.304671  1.642819  10.091235  \n",
       "2519  4.867259  2.467998  2.333545  3.086759  4.328930  1.640265  10.099412  \n",
       "2520  4.786068  2.494452  2.345048  3.123214  4.323003  1.674360   9.965621  \n",
       "\n",
       "[2521 rows x 500 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot simulation outcomes\n",
    "Shares_portfolio_10y.calc_cumulative_return() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot probability distribution and confidence intervals\n",
    "dist_plot_10y = Shares_portfolio_10y.plot_distribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count           500.000000\n",
      "mean              3.837311\n",
      "std               2.073365\n",
      "min               0.717533\n",
      "25%               2.348157\n",
      "50%               3.392801\n",
      "75%               4.724401\n",
      "max              14.151883\n",
      "95% CI Lower      1.329501\n",
      "95% CI Upper      9.711350\n",
      "Name: 2520, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Fetch summary statistics from the Monte Carlo simulation results\n",
    "Shares_portfolio_10y_tbl = Shares_portfolio_10y.summarize_cumulative_return()\n",
    "\n",
    "# Print summary statistics\n",
    "print(Shares_portfolio_10y_tbl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is a 95% chance that an initial investment of $60000 in the portfolio over the next 10 years will end within in the range of $79770.09 and $582680.99\n"
     ]
    }
   ],
   "source": [
    "# Set initial investment\n",
    "initial_investment = 20000 * 3\n",
    "\n",
    "# Use the lower and upper `95%` confidence intervals to calculate the range of the possible outcomes of our $60,000\n",
    "Shares_portfolio_10y_tbl_lower = round(Shares_portfolio_10y_tbl[8]*initial_investment,2)\n",
    "Shares_portfolio_10y_tbl_upper = round(Shares_portfolio_10y_tbl[9]*initial_investment,2)\n",
    "\n",
    "# Print results\n",
    "print(f\"There is a 95% chance that an initial investment of ${initial_investment} in the portfolio\"\n",
    "      f\" over the next 10 years will end within in the range of\"\n",
    "      f\" ${Shares_portfolio_10y_tbl_lower} and ${Shares_portfolio_10y_tbl_upper}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* initial_investment = 60000\n",
    "\n",
    "** Shares_portfolio_10y_tbl_lower = $79770.09\n",
    "\n",
    "** Shares_portfolio_10y_tbl_upper = $582680.99"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "____________________________________________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part 1: Personal Finance Planner\n",
    "The first will be a personal finance planner that will allow users to visualize their savings composed by investments in shares and cryptocurrencies *to assess if they have enough money as an emergency fund*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The current value for every union member's Savings Portfolio \n",
    "\n",
    "* **Crypto currencies:** \n",
    "\n",
    "** 1.2 BTC = $36664.80\n",
    "\n",
    "** 5.3 ETH = $6726.87\n",
    "\n",
    "** Total in Cryptocurrencies = $43391.67\n",
    "\n",
    "\n",
    "* **Stocks and Bonds:**\n",
    "\n",
    "** 50 shares of SPY =$19,210.00 \n",
    "\n",
    "** 200 shares ofAGG = $23452.00\n",
    "\n",
    "** Total in Stocks and Bonds = $42662.0 \n",
    "\n",
    "\n",
    "* **The total amount of savings = $86053.67**\n",
    "\n",
    "* **Emergency fund = $36000.00**\n",
    "\n",
    "** The current Total Value for the Savings Portfolio is over passing the Goal for the Emergency fund of 3 months of  salary by about 240%.\n",
    "\n",
    "* **With this result we can conclude the investment in a diversified market was good advice and helped the members of the union to enhance their financial health, and have more money than the emergency fund.**\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_____________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part 2: Personal Finance Planner\n",
    "The second tool will be a retirement planning tool that will use the Alpaca API to fetch historical closing prices for a retirement portfolio composed of stocks and bonds, then run Monte Carlo simulations to project the portfolio performance at 30 years. You will then use the Monte Carlo data to calculate the expected portfolio returns given a specific initial investment amount."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* For the first retirement option, we have an Weight Investment Distribution: 60% SPY & 40% AGG for 30 years with 2 different initial investments:\n",
    "\n",
    "* initial_investment = 20000\n",
    "\n",
    "    ** Shares_portfolio_30y_tbl_lower = 113274.77\n",
    "\n",
    "    ** Shares_portfolio_30y_tbl_upper = 1565272.52\n",
    "\n",
    "* initial_investment = 30000\n",
    "\n",
    "    ** Shares_portfolio_30y_tbl_lower = 169912.16\n",
    "\n",
    "    ** Shares_portfolio_30y_tbl_upper = 2347908.78\n",
    "\n",
    "* Since Weight Investment Distribution (60% SPY & 40% AGG) is the same in both cases, the ratio investment/earnings  is linear, as big is the initial investment,\n",
    "bigger will be the earnings you get. With that said, I would recommend to invest in a 30 year portfolio with an Initial Investment of USD30000, due the earnings\n",
    "could be about 50 PER CENT higher than Initial Investment of USD20000.00.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_____________________________________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optional Challenge - Early Retirement\n",
    "\n",
    "Try adjusting the portfolio to either **include more risk (a higher stock than bond ratio)** or to have a larger initial investment and rerun the retirement analysis to see what it would take to retire in `5` or `10` years instead of `30`!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.- To adjust the retirement plan for an earlier than normal retirement, I evaluated 2 options for a 5 years early retirement with an Initial Investment of $60000: \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 1: initial_investment = 60000 , Investment distribution: 60% SPY & 40% AGG\n",
    "\n",
    "    ** Shares_portfolio_5y_tbl_lower = $57727.45\n",
    " \n",
    "    ** Shares_portfolio_5y_tbl_upper = $156872.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 2: initial_investment = '$60000' , Investment distribution: 80% SPY & 20% AGG\n",
    "\n",
    "    ** Shares_portfolio_5y_tbl_lower = $56585.05\n",
    "\n",
    "    ** Shares_portfolio_5y_tbl_upper = $217785.05"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Increasing the risk (Option 2) did offer a major enhance in earnings for a 5 years tbl_upper Portfolio. I do recommend taking the Option 2, since it will be the same investment/time but more expectancy (option 2: initial_investment = 60000 , Investment distribution: 80% SPY & 20% AGG)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.- To adjust the retirement plan for an earlier than normal retirement I evaluated 2 options for a 10 years early retirement with an Initial Investment of $60000:: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 1: initial_investment = 60000  , Investment distribution: 60% SPY & 40% AGG\n",
    "\n",
    "    ** Shares_portfolio_10y_tbl_lower = $78,913.61\n",
    "\n",
    "    ** Shares_portfolio_10y_tbl_upper = $312,939.65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Option 2: initial_investment = 60000 , Investment distribution: 80% SPY & 20% AGG\n",
    "\n",
    "    ** Shares_portfolio_10y_tbl_lower = $79770.09\n",
    "    \n",
    "    ** Shares_portfolio_10y_tbl_upper = $582680.99"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Same like previous case, Increasing the risk (Option 2) did offer a major enhance in earnings for a 10 years tbl_upper Portfolio. I do recommend taking the Option 2, since it will be the same investment/time but more expectancy (option 2: initial_investment = 60000 , Investment distribution: 80% SPY & 20% AGG)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The 10 years Portfolio Option 2 present best option for early retirement, warning the client it is a high risk, and if we take as a base that a month of expences iqual to UDS12000, it could be enough cover 4 years of expenses."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Wrapping up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We can see in these portfolios excersices time is the major factor affecting the final results. As longer the time for the portfolio, the bigger the earnings."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Comparing the best options for long term retirement(30 years) saving vs. early retirememt (10 years)\n",
    "\n",
    "\n",
    "    ** initial_investment = 30000 , Investment distribution: 60% SPY & 40% AGG\n",
    "\n",
    "            Shares_portfolio_30y_tbl_lower = 169912.16\n",
    "\n",
    "            Shares_portfolio_30y_tbl_upper = 2347908.78\n",
    "\n",
    "vs.\n",
    "\n",
    "    ** Option 2: initial_investment = 60000 , Investment distribution: 80% SPY & 20% AGG\n",
    "\n",
    "            Shares_portfolio_10y_tbl_lower = 79770.09\n",
    "\n",
    "            Shares_portfolio_10y_tbl_upper = 582680.99\n",
    "\n",
    "\n",
    "#### To sum it up, I would recoment the portfolio long term retirement(30 years) because it uses less initial investmet (USD 30000) and the expected reward is almost 4 times the expected reward from the portfolio 10 years and initial investment (USD 60000).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
